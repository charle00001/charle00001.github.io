[{"content":"效果 这个玩意的功能你们在这里自己看吧，我就不写了，对我的键盘友好一点吧（借口，其实懒得写）\n代码 JS 代码 var selectedFile; // 用于存储选择的文件 var encodeDecodeResult; // 用于存储编码或解码的结果 function handleFileSelect(files) { if (files.length \u0026gt; 0) { selectedFile = files[0]; displaySelectedFileName(selectedFile.name); } } function dropHandler(event) { event.preventDefault(); handleFileSelect(event.dataTransfer.files); } function dragOverHandler(event) { event.preventDefault(); } // 编码文本 function encodeText() { var inputText = document.getElementById(\u0026#34;inputText\u0026#34;).value; if (inputText) { var outputText = encodeUnicode(inputText); displayOutputText(outputText); displayResult(\u0026#34;编码成功！\u0026#34;); } else { displayResult(\u0026#34;请输入文本！\u0026#34;); } } // 辅助encodeText函数，让它使用UTF-8 function encodeUnicode(str) { // 将字符串转换为UTF-8，然后进行base64编码 var utf8Bytes = new TextEncoder().encode(str); return btoa(String.fromCharCode.apply(null, utf8Bytes)); } // 解码文本 function decodeText() { var inputText = document.getElementById(\u0026#34;inputText\u0026#34;).value; if (inputText) { try { var outputText = decodeUnicode(inputText); // 使用 decodeUnicode 替换 atob displayOutputText(outputText); displayResult(\u0026#34;解码成功！\u0026#34;); } catch (e) { displayResult(\u0026#34;解码失败：\u0026#34; + e.message); } } else { displayResult(\u0026#34;请输入文本！\u0026#34;); } } // 辅助decodeText函数，使用UTF-8 function decodeUnicode(str) { // 对base64编码的字符串进行解码，然后转换为UTF-8字符串 var bytes = atob(str).split(\u0026#39;\u0026#39;).map(function (char) { return char.charCodeAt(0); }); return new TextDecoder().decode(new Uint8Array(bytes)); } // 重置 function resetFields() { document.getElementById(\u0026#34;inputText\u0026#34;).value = \u0026#34;\u0026#34;; document.getElementById(\u0026#34;outputText\u0026#34;).value = \u0026#34;\u0026#34;; selectedFile = null; displaySelectedFileName(\u0026#34;\u0026#34;); displayResult(\u0026#34;\u0026#34;); encodeDecodeResult = null; } // 拷贝 function copyResult() { var outputText = document.getElementById(\u0026#34;outputText\u0026#34;); if (outputText.value) { outputText.select(); document.execCommand(\u0026#34;copy\u0026#34;); displayResult(\u0026#34;已复制到剪贴板！\u0026#34;); } else { displayResult(\u0026#34;没有可复制的内容！\u0026#34;); } } // 编码文件 function encodeFile() { if (selectedFile) { var reader = new FileReader(); reader.onload = function (event) { handleFileEncoding(event.target.result); }; reader.readAsDataURL(selectedFile); } else { displayResult(\u0026#34;请先选择文件！\u0026#34;); } } // 辅助encodeFile函数 function handleFileEncoding(dataURL) { var sizeInBytes = calculateSizeInBytes(dataURL); var sizeInMB = sizeInBytes / (1024 * 1024); if (sizeInMB \u0026gt; 1) { displayResult(\u0026#39;编码结果较大，请点击\u0026#34;下载结果\u0026#34;来保存\u0026#39;); } else { displayOutputText(dataURL); displayResult(\u0026#39;编码完成，请点击\u0026#34;复制\u0026#34;或\u0026#34;下载结果\u0026#34;进行保存\u0026#39;); } encodeDecodeResult = dataURL; } function calculateSizeInBytes(dataURL) { return (dataURL.length * (3 / 4)) - (dataURL.endsWith(\u0026#34;==\u0026#34;) ? 2 : dataURL.endsWith(\u0026#34;=\u0026#34;) ? 1 : 0); } // 解码文件 function decodeFile() { // 检查是否有选择的文件 if (selectedFile) { var reader = new FileReader(); reader.onload = function (event) { try { handleFileDecoding(event.target.result); } catch (e) { displayResult(\u0026#34;文件解码失败！错误信息: \u0026#34; + e.message); } }; reader.readAsText(selectedFile); } else { // 如果没有选择的文件，尝试从输入框读取dataURL var inputText = document.getElementById(\u0026#34;inputText\u0026#34;).value; if (inputText) { try { handleFileDecoding(inputText); } catch (e) { displayResult(\u0026#34;解码失败！错误信息: \u0026#34; + e.message); } } else { displayResult(\u0026#34;请先选择文件或输入dataURL！\u0026#34;); } } } // 辅助decodeFile function handleFileDecoding(fileContent) { if (isDataURL(fileContent)) { var base64EncodedData = fileContent.split(\u0026#39;,\u0026#39;)[1]; var mimeType = fileContent.split(\u0026#39;,\u0026#39;)[0].split(\u0026#39;:\u0026#39;)[1].split(\u0026#39;;\u0026#39;)[0]; var byteArray = convertToByteArray(atob(base64EncodedData)); encodeDecodeResult = new Blob([byteArray], { type: mimeType }); displayResult(\u0026#34;解码成功！请点击下载结果来保存\u0026#34;); } else { displayResult(\u0026#34;提供的内容不是有效的dataURL！\u0026#34;); } } function isDataURL(str) { return str.startsWith(\u0026#39;data:\u0026#39;); } function convertToByteArray(decodedData) { var byteNumbers = new Array(decodedData.length); for (var i = 0; i \u0026lt; decodedData.length; i++) { byteNumbers[i] = decodedData.charCodeAt(i); } return new Uint8Array(byteNumbers); } function downloadResult() { if (encodeDecodeResult) { var blob = createBlobForDownload(); initiateDownload(blob); } else { displayResult(\u0026#34;没有可下载的内容！\u0026#34;); } } function createBlobForDownload() { return encodeDecodeResult instanceof Blob ? encodeDecodeResult : new Blob([encodeDecodeResult], { type: \u0026#34;text/plain\u0026#34; }); } function initiateDownload(blob) { var link = document.createElement(\u0026#34;a\u0026#34;); link.download = determineDownloadFileName(blob); link.href = URL.createObjectURL(blob); link.click(); encodeDecodeResult = null; } function determineDownloadFileName(blob) { var fileName = \u0026#34;result\u0026#34;; if (blob.type.startsWith(\u0026#34;image/\u0026#34;)) { fileName += \u0026#34;.\u0026#34; + blob.type.split(\u0026#39;/\u0026#39;)[1]; } else if (blob.type === \u0026#34;text/plain\u0026#34;) { fileName += \u0026#34;.txt\u0026#34;; } return fileName; } function displaySelectedFileName(fileName) { document.getElementById(\u0026#34;selectedFile\u0026#34;).innerHTML = fileName ? \u0026#34;已选择文件：\u0026#34; + fileName : \u0026#34;\u0026#34;; } function displayOutputText(text) { document.getElementById(\u0026#34;outputText\u0026#34;).value = text; } function displayResult(message) { document.getElementById(\u0026#34;result\u0026#34;).innerHTML = message; } 原理 没啥原理，就是利用了atob和btoa这俩函数，要是没这俩函数的话就没法做了\n函数名 其中有一些没啥用的函数（显示状态、文件名；等等），真正有一些用处的函数就是atob和btoa这俩玩意了，不过我在这里只想讲讲这两个函数的命名.\n首先，当我不知道这两玩意时，一直以为atob和btoa的 b 是 base64.\n从上面的理解来看，atob是编码；btoa是解码，但是事实完全不同.\n实际上，a指的是 ASCII 编码的字符串；而b指的是binary，即“二进制”；\n而编码和解码的函数与我上面猜测的相反：atob是解码，btoa是编码.\n为啥这样起函数名？ 由于 base64 编码的发明初衷不像我们想象的那样，用来编码一句话，然后“加密”发给朋友（其实完全没有加密功能，“编码”和“加密”是【不同的】）； 而是为了传输二进制数据的.\n我们常见的很多文件都是使用“二进制”来存储的，比如：图片文件、压缩文件、音频和视频。\n但是，这些二进制的文件很难通过网络传输，因为他们是二进制的；这是就需要 base64 登场了，它将二进制文件编码成一个dataURL，就变成了一个看得见、可编辑的字符串，这样就可以传输了.\n至于dataURL是啥，可以看看知乎专栏的这篇文章，我认为讲的比较详细：戳这里\n还有一篇 Mozilla 的文档：这里\n完整源代码下载 这点玩意根本不入各位的法眼，放在GitHub就太丢人了，干脆直接在这里下载个zip么得了：\n下载链接\n不过，我的下载链接用的也是dataURL，哈哈哈哈哈哈\nP.S.：很无聊，所以水一篇。但是我发现我连水一篇都懒的水 :(\n","permalink":"https://charle00001.github.io/posts/the-base64-tool/","summary":"效果 这个玩意的功能你们在这里自己看吧，我就不写了，对我的键盘友好一点吧（借口，其实懒得写） 代码 JS 代码 var selectedFile; // 用于存储选择的文件 var encodeDecodeResult; // 用于存储编","title":"使用JS做了一个Base64编解码器"},{"content":"前言 你正常访问网站时，你会用你的电脑直接发送流量/接收流量.\n这些流量里通常包含着：你要浏览的内容、你输入的密码、或者你的支付卡、等等.\n大多数人都这么干，不过这会有一些坏处：\n暴露你的 IP 当你暴露你的 IP 时，网站管理员（或者其它知道你的 IP 的人）可以通过查询你的 IP 对应的地方来找到你.\n不过，如果你不是通缉犯的话，没人会干这事 会被通过“检测你所在的国家”限制 比如，奈飞的国家限制不让你看很多影片.\n如果网站不是 HTTPS，你的信息将会被泄露 当别人获取到你的“明文流量”时，上面说的“你看到的内容、密码、支付卡”全泄露啦 :(\n等等，欢迎在评论区补充 什么是代理？ 注：“代理”指的是“通过代理服务器进行发送/接收数据包”.\n维基百科：更深的了解代理服务器\n回归正题，代理服务器就是一个“代理你的电脑发送/接收流量”的玩意.\n具体流程： 你的电脑要访问example.com.\n你的电脑发送请求到代理服务器，告诉它你要访问example.com.\n代理服务器知道了，然后就去给example.com发送请求.\n它成功请求到了example.com（example.com回应它了，并且返回了内容）.\n代理服务器把example.com返回的内容转发给你.\n你的电脑收到了流量，成功的通过代理服务器获取了example.com的内容（也可以是别的操作）.\n对“具体流程”的补充 发送请求 / 返回内容 / 等等只是一个简易的说法，说的标准点就是它们都在【发送 / 接收】数据包.\n关于第三步：代理服务器【可能】还需要修改你的 http 请求头 ，比如：\nX-Forwarded-For 字段\nX-Forwarded-For 字段的格式是这样的：\nX-Forwarded-For: client1, proxy1, proxy2 最左边的client1是你客户端（本机）的真实IP，右边的proxy1和proxy2是第一个“代理服务器的IP”和“第二个代理服务器的IP“.\n当代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边，所以还可以有：proxy3或proxyn.\n如果你要“让自己匿名”，就不应该让代理服务器添加这个字段，正确的做法是 “不添加”或“伪造你的客户端IP“.\n维基百科：详解 X-Forwarded-For 字段\n等等，可以在评论区补充\n附上一张俺在别的地方盗的图来描述代理服务器： 图解：左边和右边的电脑在通讯时候，需要经过中间的电脑中转，而中间的那部电脑就是代理服务器.\n危险性 这也被称为“间谍代理”.\n如果你的【代理服务器供应商 / 你在网上随便找的代理服务器】动机不纯（有恶意），它就会企图get你的流量，从而获取你的信息 （密码/身份/银行卡等等）.\n解决方法是：使用 Https 来访问网站，因为不可能有人能解密 Https 流量.\n（老调重弹，开启浏览器的 HTTPS-Only 模式）\n协议 代理（服务器）的协议通常有： HTTP协议 http 代理会代理 http 流量，无流量加密功能，无法加密你的连接.\n当你只设置 HTTP 代理时，HTTPS 流量不会通过它（通常会直连）.\nHTTPS协议 HTTPS 代理会代理 HTTPS 流量，无流量加密功能（而且不需要，HTTPS 流量本身就是加密的）.\n当你只设置 HTTPS 代理时，HTTP 流量不会通过它（通常会直连）.\nSocksS协议 此协议不安全（无论是 Socks4 还是 Socks5），因为它不加密你的流量，你的明文流量会暴露.\n所以我们必须结合安全的加密措施（比如 TLS / SSL） 来使用此协议.\n（比如有一个叫做 Socks5 Over TLS 的协议）\n知名的 Shadowsocks 就是基于 Socks5 搞出来的.\n关于翻墙协议 问：如何咬文嚼字的区分那些知名的翻墙协议是“代理协议”还是“别的”？\n知名的翻墙协议有： Shadowsocks\nVmess\nVLESS\nTrojan\n答案： 它们【都是代理协议】，我认为它们挺模棱两可的，原因如下：\n不符合“代理”的性质 “代理”不同于 VPN，VPN 通常会将设备中的所有流量【路由到 VPN 服务器】，而代理通常为特定的软件进行“流量代理”，但是你看看哪个软件的“代理设置”中有（比如）Shadowsocks？\n传统代理协议通常“不加密” 上面说的那些代理协议，每一个都加密你的流量.\n【但是】，对于“传统的代理协议”【HTTP(s)、Socks(4/4a/5)】来说，它们都不具备“加密流量”的功能.\n搭配的（翻墙）软件不同，性质也不同\nShadowrocket 比如，iOS 上的 Shadowrocket 支持很多代理协议，当上述的（举个例子）Shadowsocks 搭配上了 Shadowrocket 并打开“代理模式”，那它的效果就是一个 VPN 啊.\n当你打开 Shadowrocket 的“代理模式“时，它会将整个设备的流量路由到代理服务器，这和 VPN 完全一样.\n当你打开 Shadowrocket 的“配置模式”时，它还是会将设备中的流量都拉到它那里；但是这是它会按照你的“配置文件”来区分“哪个走代理，哪个不走”.\nQv2ray 我以前用过这玩意，挺好用的，但是现在用不上了.\n它这个软件不支持像 Shadowrocket 那样的全局代理（类似 VPN），只能配置为系统代理，而且不更新了.\n总之，不管如何，以上部分只是我为了咬文嚼字而咬文嚼字从而乱想出来的，略过即可.\n作用 “代理“（通过代理服务器进行发送/接收数据包）的作用有很多，请往下看：\n改变自己的 IP 改变自己的 IP 有很多作用，既有好的，也有坏的（用来干坏事），比如：\n绕过“地理位置限制“\n解锁奈飞的影片\n低价购买商品（有些商店会区别对待不同的地区）\n（等等）\n隐藏自己真实的地理位置\n隐藏自己不被警察发现（坏的用途）\n不希望被你访问的网站的管理员发现你的位置（好的用途，每个人都应该有自己的隐私）\n（等等）\n选用“正确的协议”可以加密你的流量\n比如 Shadowsocks 和 VLESS （等等），知道的可以在评论区补充\n翻墙 这个用途是中国特色，无语死了 :(\n但是要记住：普通的代理协议【比如 http(s) 和 Socks】不是为翻墙而设计的，很容易被“墙”检测出来.\n要翻墙，就要找那些“专门为翻墙而设计的协议”，比如“VLESS、Trojan等等”，而不是 “无流量加密功能，无流量伪装功能” 的“传统代理协议”.\n提升网络速度 通常，一台服务器的带宽比你的家用带宽牛逼很多，所以可以提升网络速度.\n什么是 VPN？ VPN 是一个缩写，英语全称“Virtual private network”，中文“虚拟专用网”.\n有些人一听到“VPN”三个字就立马想到了翻墙，其实 VPN 的作用不仅仅是用来翻墙.\n在中国也有合法的 VPN，只是不能用来翻墙.\n维基百科：VPN\n具体流程 与“代理”差不多，只不过需要把“代理”换成“VPN“.\n用途 连接到内网（局域网） 众所周知，由于把一些敏感的资料（比如公司的机密等等） 放到一台“暴露在公共互联网的服务器”有风险（容易被骇客攻击）.\n所以大多数公司里都会有一个“内网”，员工连接到内网之后就可以访问那些敏感资料（但是内网不是“绝对安全”的，只是公网更不安全）.\n那么，VPN 的一个作用就是让人从“公共互联网”连接到一个“私有的局域网（内网）”.\n加密你的流量 增加安全性，让流量更不容易被破解.\n在一般情况下（不排除有奇葩的个例），VPN 软件通常会让“整个操作系统的流量”都通过它，做到“保护你这个电脑中的所有连接”，这是它与代理的一个区别.\n附上一张在网上找的图：\n它的加密算法通常由提供商决定，所以奇葩的提供商会搞出一些奇葩的幺蛾子.\n（详见下面的”危险性“）\n危险性 之前说了 VPN 会加密你的流量，【但是】，也不排除有一些奇葩的 VPN，它的“VPN 运营商”乱搞，让 VPN 的协议用“不加密的协议”（比如 HTTP），那就没半点用处了.\n（理论上完全能做得到）\n另外，还有一些恶意的 VPN，专门想方设法获取你的流量（要是是明文流量就最好了），从而得到你的信息（上面提到的密码等等），然后就可以玩很多花样啦.\n协议 （等待作者更新）\n选择 VPN 在选择 VPN 之前，要保证你的 VPN 提供商 “足够靠谱”、“没有不好的黑历史”.\n你想想，你的 VPN 提供商能获取到你的“HTTP 流量”，而且是【明文】的（里面或许有你的密码？？）；\n退一万步来讲，你使用 HTTPS 来访问网站；他们也能获取到你访问的网址.\n这里有一些较好的 VPN： （请自己辨别好与坏，不要盲从，仅推荐）\nNordVPN 好几年前能用来翻墙，现在不了，好可惜.\n（注：VPN 是用来保护连接、加密流量的，不是用来躲避 GFW 的，所以那些 VPN 才会被封！）\n网站：https://nordvpn.com/\nProton VPN ProtonMail 的公司搞的，我就在使用 ProtonMail.\n安全性应该也还不错.\n网站：https://protonvpn.com/\n1.1.1.1（也叫 WARP） CloudFlare 出品，应该不会太坏.\n一共有两个模式，一个是仅使用 1.1.1.1 DNS，另一个是使用 1.1.1.1 + VPN.\n重要的是，在【中国】也能使用！也能用来【翻墙】！\n它的 VPN 有普通 WARP（速度较慢）和 WARP+（速度较快），要用 WARP+ 的话就去谷歌上搜：获取warp+流量.\n网站：https://1.1.1.1/\nExpressVPN 老牌、靠谱.\n网站：https://www.expressvpn.com/\n","permalink":"https://charle00001.github.io/posts/difference-between-proxy-and-vpn/","summary":"前言 你正常访问网站时，你会用你的电脑直接发送流量/接收流量. 这些流量里通常包含着：你要浏览的内容、你输入的密码、或者你的支付卡、等等. 大多数","title":"扫盲代理 \u0026 VPN | 代理与 VPN 有什么区别？"},{"content":"要的效果： 比如有个软件\u0026quot;Example\u0026quot;，我要打开两个它，不是仅仅在已有一个窗口的情况下再新建一个窗口.\n由于你新建窗口的时候，本质上两个窗口（或者更多）是一个“进程（实例）”，而我们要的是“*两个实例”.\n废话说完，开搞！\nmacOS: 打开终端(Terminal)，直接在启动台里面搜索“终端”就行.\n输入命令，这命令会打开这个应用，但是不是多实例\nopen -a 你想打开的应用 要打开“多实例”？ open -n -a 你想打开的应用 切忌【别】写成open -an 你想打开的应用或者open -a -n 你想打开的应用，必须单独-a 你想打开的应用，再-n.\n这个命令 macOS 专有. 这句话不对，查过了 Linux 也有，但是没有 macOS 的效果（比如打开应用程序）.\n有些应用会在打开的时候检测有没有已经打开了一个实例（例如Tor Browser等等），要么报错不让你打开，要么直接没动静.\n实测终端可以（双开/更多）.\nLinux: 使用\u0026amp;，即在你要运行的东西后面加上\u0026amp;（需要一个空格）. 这个方法在 macOS 终端也可以. 使用nohup命令. nohup 英文全称 no hang up（不挂起），你直接关闭终端都不影响它.\n命令：\nnohup firefox \u0026amp; ","permalink":"https://charle00001.github.io/posts/multi-instance/","summary":"要的效果： 比如有个软件\u0026quot;Example\u0026quot;，我要打开两个它，不是仅仅在已有一个窗口的情况下再新建一个窗口. 由于你新建窗口的","title":"如何实现同应用多实例（macOS、Linux）"},{"content":"用户代理是啥 注：本文提到的对象并不是“代理服务器”.\n用户代理是一个代表“人” 的 计算机程序，我们生活中常见的的 “网页浏览器”就是一个用户代理.\n通常来说，“人类”是不具备【不借助工具】来访问互联网的能力的 （你自己想想你的身体中哪个器官能当作浏览器使用）\n所以我们必须使用一种“用户代理”，来协助我们访问互联网，计算机程序就能胜任，所以它就是很好的用户代理.\n用户代理的类型 我们的 \u0026ldquo;Chrome、Firefox、Opera、Safari\u0026rdquo; 等等都是用户代理，\u0026quot;Tor Browser\u0026quot; 也是.\n如果你拥有一个网站，你将它提交到了Google. 过了几天，不出意外的话就会有“爬虫”来你家转一圈，看看有没有什么好东西.\n这时，“爬虫”就是一个用户代理. Google的爬虫就叫 \u0026ldquo;Googlebot\u0026rdquo;.\n如果不明白“爬虫”是啥子，请看这里（维基百科）\n用户代理字符串（也叫标头） 现在，我们有了很多的用户代理（Chrome、Firefox、Opera、Safari、Tor Browser 等等），那么我们得区分它们.\n给不同的浏览器设置不同的用户代理字符串就可以区分开来，也给了网站管理员更多选择（比如，某个浏览器更牛逼，它就能获得更牛逼的页面）\n于是，用户代理字符串就必须诞生了.\n一些混淆 现在在大多数的“博客”上面写的“用户代理(或者 UA 和 User-Agent)”指的是“用户代理”是“用户代理标头（或字符串）”，这个玩意是用来描述“用户代理”的.\n不要混淆“用户代理”和“用户代理标头（或字符串）” 从 http 协议的头中发现用户代理字符串 众所周知，http协议的请求报文中的“请求头”包含了很多奇奇怪怪的东东.\n下面来看看真实的请求头（GET，cookie有删改）：\nGET / HTTP/1.1 Host: www.baidu.com Connection: keep-alive Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36 Sec-Fetch-Dest: document Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9 Cookie: example=test;example2=test2 大家有可能会注意的中间有一条User-Agent: ......，这就是用户代理字符串.\n检测你自己浏览器的用户代理 这个工具：在这儿，或者在“别的\u0026amp;工具“页面也有\n解析 User-Agent 字符串内容 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36 1. Mozilla/5.0 Mozilla/5.0 是一个用户代理标识符，用来表示与 Mozilla 兼容的浏览器.\n其实现在所有的主流浏览器的 User-Agent 字符串都包含 Mozilla/5.0，这是因为（请听故事）：\n1993年，一个名叫 \u0026ldquo;Mosaic\u0026rdquo; 的浏览器在伊利诺伊大学的“国家超级计算中心”诞生。这是首个支持图片的浏览器。\n（注：当时的浏览器已经有用户代理字符串了） 用户代理字符串：NCSA_Mosaic/2.0（Windows 3.1）\n（注：NSCA是“伊利诺伊大学国家超级计算中心”的洋文缩写）\n不久，Marc Andreessen（Mosaic的开发骨干）去了硅谷创业，发明了 Mozilla 浏览器（Mosaic killer，中文可以译为“Mosaic 浏览器终结者”）。 用户代理字符串：Mozilla/1.0 (Win3.1)\n伊利诺伊大学和“国家超级计算中心”对 Marc Andreessen 对所作所为很不爽，于是 Mozilla 浏览器改名为 Netscape（大名鼎鼎的网景）。\n虽然改名改成了\u0026quot;Netscape\u0026quot;，但是它的 User-Agent 字符串还是保留着 \u0026ldquo;Mozilla\u0026rdquo; (Mozilla/1.0 (Win3.1))\n当时的网景浏览器很牛逼，支持\u0026quot;frames（框架）\u0026quot; 服务器端有了“用户代理(User-Agent)嗅探技术”之后，会针对不同的浏览器发出不同的网页内容。 由于网景浏览器(Netscape)可以使用框架，它就会得到一个更高级的页面（带有框架）\n微软看到了网景浏览器的威胁，立马推出了\u0026quot;IE\u0026quot;【漏洞大户，如果你想中病毒就尽管用它吧（顺便吐槽），不过当时 IE 也是不错的】\n当时的网景浏览器能得到带有框架的页面，现在 IE 也支持了框架。可是如果它如果也想得到带有框架的页面，就必须等那些网站一个一个改代码（当检测到 IE 时也给它发一个更高级的页面）。\n微软等不及了，“狗”急跳墙，直接将 IE 的 User-Agent 字符串改成了 “Mozilla/x.0 \u0026hellip;.”，假装自己是网景（Netscape，前身 Mozilla 浏览器）。 （IE 的用户代理欺骗很成功）\n由于微软的 IE 这样做，往后的所有浏览器都开始学它，前面加个Mozilla/x.0来欺骗老网站，让网站以为它是 Mozilla(Netscape)。 2. (Windows NT 10.0; Win64; x64) 2.1. 括号里的第一个：Windows NT 10.0：\n代表你的操作系统是 Windows 10，\u0026ldquo;Windows NT 10.0\u0026rdquo; 是内部版本号，因为 Windows 系统的内核是 \u0026ldquo;Windows NT\u0026rdquo;.\n2.2. Win64; x64\n代表你用的是64位 Windows 操作系统.\n3. (KHTML, like Gecko) 先解释这个.\nLinux 有一个叫做 \u0026ldquo;Konqueror\u0026rdquo; 的浏览器，使用的是自家的 KHTML 渲染引擎.\n当时，网景（后来摇身一变变成火狐）有一个渲染引擎，很牛逼，叫 \u0026ldquo;Gecko\u0026quot;。\n于是，那些网站就开始检测客户端的用户代理字符串，一发现有 Gecko 渲染引擎的就送一个更高级的页面（是不是似曾相识）。\nLinux 的 Konqueror浏览器很不甘心：“凭什么，我的 KHTML 渲染引擎和 Gecko 一样好！”\n于是，它又在用户代理字符串里做手脚：在 KHTML 后面，加一个 \u0026ldquo;like Gecko\u0026quot;，意思是和 Gecko 差不多。\n4. AppleWebKit/537.36 WebKit 是苹果在 KHTML 的基础上搞出来的渲染引擎，它在字符串中保留了(KHTML, like Gecko).\n5. Safari/537.36 代表了（苹果的）Safari 浏览器的版本。\n6. Chrome/80.0.3987.163 其实，前面的 Safari 是假的。这个用户代理字符串真正的浏览器是 Chrome。\n当时谷歌也想搞个叫做 \u0026ldquo;Chrome\u0026rdquo; 的浏览器，但是它不想再搞个引擎了 （不要把渲染引擎和 JS 引擎搞混了，谷歌的 V8 是 JS 引擎）.\n于是它搞了个基于 （苹果的）WebKit 的浏览器，将一切都保留，就只添加了一个Chrome/x.x.x.x（浏览器名称以及版本号）.\n（也许它认为自己很厚道，其实没有，因为 Chrome 现在是全球使用人数最多 【没有之一】 的浏览器）\n用户代理欺骗 “用户代理欺骗”就是把自己原来的用户代理【伪装】成“其他的东东”.\n比如：你原来用的 Chrome \u0026amp; Windows 10，然后（在网站管理员的视角）—— 你摇身一变，变成了尊贵的 Ubuntu \u0026amp; Firefox ESR 使用者（也可以是别的，甚至你可以把自己伪装成谷歌的网页爬虫）.\n多线程下载器 众所周知，有一些很牛逼的“下载器”，能让你提速下载（Aria2、IDM、NDM、等等）.\n这些下载器提速下载能成功的原因有一个：它们更改了自己的用户代理字符串，让网站以为是真的人在下载，所以没把下载进程掐死.\n“应该“的用户代理字符串类似于告知网站：我是机器人。\n（我写”应该“是因为用户代理欺骗【本质是不厚道的】，服务器有权根据真实的用户代理字符串来决定你去 or 留）\n因为多线程下载器会导致服务器的 CPU 占满、发热等等种种问题.\n主流浏览器的用户代理欺骗 这个部分在之前“解析用户代理字符串”的一章讲过，不愿意往回找的点这个链接：\n只要这里可以点击，就点这里\nUser-Agent 的更详细介绍：这里（维基百科） 我在查阅了维基百科之后发现洋文版的介绍被分成了两个部分 —— 用户代理和用户代理字符串.\n但是中文的并没有分裂（洋文版更新的比中文版快）.\n不过我认同它的做法：毕竟“用户代理”和“用户代理字符串（也叫标头）”是两个玩意.\n浏览器指纹 在标题 \u0026amp; 简介里面我还提到“浏览器指纹”这个可恶的玩意，因为这玩意最主要的作用就是“让广告商追踪你”.\n对“广告商”来说，“追踪你”有很多作用，比如：\n昨天它收集到了你的一些信息，可以“用来给你精准投放你感兴趣的广告”.\n但是一天过去了，它怎么发现“今天的你”是“昨天的你”捏？\n它的“追踪宝典”中，有一条，就是“浏览器指纹追踪”，也包括了用户代理字符串的识别.\n作为一个普通人，在那里上网，对这些都不太清楚，那么恭喜你，你每一天都在被追踪.\n避免方法 时不时的改变你的用户代理 你改变了用户代理（字符串）后，广告商就会发现，昨天收集到的你的用户代理字符串与今天你的用户代理字符串【不一样】.\n然后就很有可能分辨不出来你与昨天的你 :)\nTips: 这一点可以通过安装浏览器扩展来解决（严格来讲，这叫“改变用户代理字符串”）.\n“改变用户代理（不是光字符串）”可以通过换浏览器（和系统）的方式实现.\n挑选一个最普遍的用户代理 比如：用的人最多的系统 —— Windows + 用的人最多的浏览器 —— Chrome\n由于使用这个组合的用户很多，你会和他们混在一起.\nTips: 这一点可以通过安装浏览器扩展来解决（严格来讲，这叫“改变用户代理字符串”）.\n“改变用户代理（不是光字符串）”可以通过换浏览器（和系统）的方式实现.\nuBlock Origin，启动！ 忍无可忍，无须再忍！直接用 uBlock Origin 把所有那堆破玩意 —— 广告、追踪器、奇奇怪怪的各种玩意全部屏蔽！！\n根本不需要改变用户代理，那些坨玩意全部灰飞烟灭！！！\n关于 uBlock Origin，请看“这篇文章”.\n推荐浏览器扩展 —— User-Agent Switcher 严格来讲，\u0026ldquo;User-Agent Switcher\u0026rdquo; 只是一个笼统的名字，这一点你看到下面就会明白.\nFirefox 的扩展 安装链接：这里不能点，别点我\n这个扩展是 Firefox 商店里安装次数（用户）最多的了，而且收到了 Mozilla 的推荐.\n介绍的话不需要过多介绍. 这个扩展的用法很简单，只要把上面的洋文翻译一下就行.\n内置了许多常见的用户代理标头，只需要动动鼠标就能发现.\nChrome/Chromium 的扩展 Firefox 上的那个扩展在 Chrome Web Store 也有，但是安装量不是最高.\n我把安装量最高的那个扩展链接也放出来.\n链接：Firefox 的推荐扩展（用户相对较少）\n链接：在 Chrome 用户最多的扩展\n注：其他的 Chromium 内核浏览器也可以戳这些链接（例如 Brave、Edge，等等）.\n介绍的话不需要过多介绍. 这个扩展的用法很简单，只要把上面的洋文翻译一下就行.\n内置了许多常见的用户代理标头，只需要动动鼠标就能发现.\n另：更改 UA 并不能完全躲过追踪. 还有很多方法，比如更改 IP 等等.\n本文不讲超出标题的内容. 回到本系列的目录\n","permalink":"https://charle00001.github.io/posts/user-agent/","summary":"用户代理是啥 注：本文提到的对象并不是“代理服务器”. 用户代理是一个代表“人” 的 计算机程序，我们生活中常见的的 “网页浏览器”就是一个用户代理.","title":"浏览器扩展推荐系列[2]：扫盲“用户代理” + 推荐扩展：User-Agent Switcher——切换自己的用户代理，拒绝浏览器指纹追踪"},{"content":"uBlock Origin 个人体验 这是一个去广告插件，个人感觉非常好用👍.\n用了一段时间（大概3年？），上各种网站再也没有看见过一丁点的广告.\n描述 这里剽窃（修改）一段维基百科上的描述：\n------------------------------------华丽的分割线------------------------------------\nuBlock Origin 是一款知名的自由、开源、跨平台“内容过滤浏览器扩展”，uBlock Origin 为用户【移除】所有广告和网站追踪，并提供自行实施内容过滤的选择。\n可在多款浏览器上使用，包括Chrome、Firefox、Edge、Opera和Safari。\nuBlock Origin 是一款高效率的广告拦截工具，只使用超低的存储器和CPU使用量，并且已经获得非常多家技术网站的赞誉，其内存占用比其他同样功能的扩展少上许多。\n安装通道 官方网站：这里～\nGithub仓库: 这里\nChrome: Chrome浏览器安装通道\nFirefox: Firefox浏览器安装通道\nEdge: Edge浏览器安装通道\nOpera: Opera浏览器安装通道\n（其他Chromium内核的浏览器【比如Brave】也可以点击“Chrome浏览器安装通道”）\n（不要把 uBlock Origin 与 uBlock 搞混了，两个是不一样的玩意）\n安装\n安装的过程非常简单，只要点击上面我给的“各大浏览器直达链接” （建议按着Ctrl或Command键打开链接，这样就【不】会把这个页面覆盖掉了）；\n然后点击“安装”按钮（有可能页面是洋文，不懂洋文的可以翻译），等几秒钟就装完了. 如果没法访问Chrome网上应用店/ 别的 “网上应用店”，请看我的这篇文章.\n配置\n安装完成后，把它固定在工具栏（Firefox和Chrome都行，这一步不会的上网去查），这样就方便我们配置了.\n点击 uBlock Origin 图标，会跳出一个框，里面有一个大大的“电源键按钮”.\n将它点亮，再点击右侧的“重新加载”，就算生效了.\n自定义一些东西\n还是点击它的图标，在它跳出来的窗口里找到“三个齿轮一样的图标”，狠狠的戳下去.\n要选择它的过滤器（或者多选）？ 点击最上方一栏的Filter lists，就会出现“各大知名的 广告/病毒/欺诈 站点的过滤器”，比如AdGuard、Easylist，要选择就点击左边的复选框即可.\n里面有一些最好要勾选的，比如Easylist，AdGuard等.\n添加针对中国的广告过滤列表 另外，由于这个扩展是洋人开发的，所以没有太多中国的广告过滤列表（有一个叫做AdGuard Chinese的，在下面的\u0026quot;Regions, languages\u0026quot;里面，可以勾一下）.\n所以我们就要去get一个叫做“Easylist China”的玩意，这个过滤列表是专门针对中国的广告运营商的.\n地址列表（GitHub仓库）：华丽的链接🔗\n2.1. 添加方法：\n2.1.1. 还是找到它的设置页面（找不到的从“配置”部分往下看）\n2.1.2. 找到\u0026quot;Filter list\u0026quot;\n2.1.3. 将页面划到最底部，找到\u0026quot;import\u0026hellip;ℹ️\u0026quot;\n2.1.4. 狠狠的用鼠标戳这个按钮，在弹出的框中输入这个链接：\nhttps://raw.githubusercontent.com/easylist/easylistchina/master/easylistchina.txt 这个链接是那个 GitHub 仓库里的过滤规则地址. 它将会不断更新.\n设置一些别的？ 点击Settings，进去就能看到许多选项.\n（普通用户完全不需要更改设置，也能起到很好的广告屏蔽效果）\n（算是写完了吧，如果还有要补充的以后再补充）\n回到本系列的目录\n与本文相关的文章： 浏览器扩展推荐系列[0]——目录，顺便聊聊“插件”\n扫盲“用户代理” + 推荐扩展：User-Agent Switcher——切换自己的用户代理，拒绝浏览器指纹追踪\n","permalink":"https://charle00001.github.io/posts/ublock-origin/","summary":"uBlock Origin 个人体验 这是一个去广告插件，个人感觉非常好用👍. 用了一段时间（大概3年？），上各种网站再也没有看见过一丁点的广告. 描述 这里剽窃（修改）一","title":"浏览器扩展推荐系列[1]——Ublock Origin，广告已成往事"},{"content":"标题：没有标题 最近事情很多（包括线上和线下）。\n（更多是在线上的，虽然线下我最近要开始考试了）\n我最近在考试（马上就到圣诞节了），关键是 “个人与社会” 这门课我感觉没什么胜算。 我考完试之后感觉自己肯定出大问题（有可能没法及格），不过我的心态还是比较好的。\n我的语言学习 众所周知（1人都不知），我的英语水平【不好】，所以交流方面（跟我的同学）会出大问题。\n他们并没有嫌弃我的英语水平，这比国内的同学的素质好很多。其中很大一部分的原因是外国同学内心很纯洁。\n我在这里有一个同学（比我年级高），她刚来的时候也很迷茫，不过过了两年就熟悉了（水平也大大提高，交流完全没问题）。\n别的（线下的事）？ 暂时想不起来了，我是一个比较乐观的人，不容易一直记得一件无聊的破事。\n关于线上的东西 我最近（也就1～2天）没怎么碰过我的博客（包括一些别的），不过今天也有很多想法：\n我的博客可阅读性 我认为一个好的博客首先要做到别人能很快的找到【一种类别】的文章，而不是一大堆乱糟糟的标签和基本上啥都没有的分类（现在可能被我弄好了），我这几天意识到了这一点。\nSo，怎么搞？\n要让读者/路人知道哪篇文章在哪儿，第一步是让你的文章有一个【一级标签】，即【大类】，比如：IT，比如：生活，比如：编程。\n可以发现，上面的“一级标签”是非常笼统的。比如编程，你编的是什么程？c++ 还是 go 还是 rust 还是 Java？前端还是后端？等等。\n所以我们需要一个“二级标签”，这个二级标签会对一级标签做更详细的解释，还是拿“编程”来作为例子：\n编程（这是一个大类） 编程：C++ 编程：Java 编程：Python 编程：Node.js 编程：前端设计 编程：后端开发 编程：数据库 由此可见，第一行是一个“大类”，即编程；往后的所有字都是“更细致的划分”，我们还可以写：编程：如何更好的编程；等等。\n第五条的补充 虽然这样很有效，但是我还是得缓一缓再改。而且现在似乎不支持让我自定义标签和归档页面的样式（在这种情况下，一级标签【即“大类”】会和它的二级标签混在一起），这就杯具啦。\n所以现在只能去搞“分类”了，标签先不管它\n已失效 此条目已失效。\n我的网络 最近网络很不稳定，时不时要去重启路由器。\n只能是两个问题：\nISP 你这个ISP怎么当的，网速这么差？\n路由器 感觉不太可能，毕竟在中国好好的\n刚刚我的 HomeBrew 又get不到包，心态崩了\u0026hellip;\u0026hellip;\n后记 网络终于正常了，不需要再去重启路由器了 :)\n23/12/27\n我的手机号停机了，但是里面明明还有钱（？） 不知道为啥，是不是因为我用它接收了 TG 和 Whatsapp 的短信验证码？\n不过现在我的 TG 还登录着（如果我现在给他登出我就废了，根本收不到验证码，Whatsapp 也一样）\nHomebrew 你给我过来，说说为什么要抛弃 macOS 10.14 Mojave 和 macOS 10.15 Catalina\n（Mojave 是 macOS 史上最好的系统！）\n我这电脑make都费劲。。。\n又见博客 我之前在那里捣鼓我那破博客时犯了一个错误：链接写成了中文，这让我又了一些困惑：\n比如：\n这是啥？： %E5%A6%82%E4%BD%95%E7%94%A8hexo+github-page%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2 这让我意识到我的链接（文件名）不能是中文的。\n所以我必须把所有链接都换成英文，但是有一些弊端：\n\u0026mdash;\u0026mdash;\u0026mdash;可恶的分割线\u0026mdash;\u0026mdash;\u0026mdash;\n我的seo会变差（别人在谷歌搜索上找到了一篇文章，然后点进去404）\n我的其他文章中有很多内链，我得一条一条改。（这是一个体力活，体力耗费大大滴）\n我意识到了一点 我以前对于“文件”这种东西有很强的不安全感，认为只要不在自己电脑上的就不安全。\n事实是：好好的人家提供给你的cdn，为什么不用？人家那个cdn说不定比你这台电脑都要存在时间久呢！！\n这些破事气死我了，一时间写了点字（也没太多）\n","permalink":"https://charle00001.github.io/posts/about-some-of-life-s-troubles-and-tweets/","summary":"标题：没有标题 最近事情很多（包括线上和线下）。 （更多是在线上的，虽然线下我最近要开始考试了） 我最近在考试（马上就到圣诞节了），关键是 “个人与","title":"月度吐槽"},{"content":"我有一个页面：别的\u0026amp;工具 里面有很多框框 这个页面我觉得不错，源代码放出来看看 实现的效果： 大概就是把鼠标移上去之后“框”放大1.25倍（不满意可以自己修改），颜色随机在【不暗的颜色】中生成一种（鼠标移开恢复透明），框的边框也一样（刷新页面也会重新选择颜色）.\n还有未开启JavaScript提醒（Noscript 部分），框内支持主标题和副标题\n如何自己修改？ 修改源代码 几乎所有地方都打上了注释，除非是【完全没接触过 JavaScript、HTML 和 CSS】的小白，否则不可能看不懂.\n加上自己的内容（主标题、副标题和指向链接） 要自己添加自己的内容的话：\n主标题和副标题这是用数组存储的. 找到var textArray =，在里面（右边）设置主标题和副标题.\n用|隔开（注意是英文输入法的\u0026quot;|\u0026quot;，不是中文输入法的\u0026quot;｜\u0026quot;），主标题在左；副标题在右.\n原来只有三个，现在你可以照样画葫芦，将, \u0026quot;主标题|副标题\u0026quot;在原先的右边多复制几个，要几个框就复制几个\n指向链接\n这也是用数组存储的. 找到var linkArray =（就在下面），链接就一个，所以不需要分隔符|.\n要增加框的话就像上面那样操作即可.\n当你发现你改好了两个以后，框没出来\n这时要找到： // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 （上面的那一坨注释可以删掉，如果你不是新手的话）（看我多关心）\n夹在中间的就是一个变量，定义了盒子（框框）的数量，将3改的更大即可（要几个框就改成几）.\n现在就能用了，还在等什么！👇 至于如何在 Hugo 博客页面中嵌入html代码，请看“这篇”文章. 如果对代码认为有改进的地方，可以联系我：这里有我的邮件地址 声明：本代码的开源协议采用MIT许可证. \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Noscript部分 --\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;div class=\u0026#34;alert\u0026#34;\u0026gt;你的浏览器不支持或禁用了JavaScript，请开启JavaScript功能。\u0026lt;/div\u0026gt; \u0026lt;/noscript\u0026gt; \u0026lt;style\u0026gt; /* 设置外部容器的样式，用于包含多个框 */ .container { display: flex; /* 使用弹性布局 */ flex-wrap: wrap; /* 允许换行 */ gap: 11px; /* 设置框之间的间距 */ } /* 每个框的样式 */ /* 在.box前加了更具体的指定 */ #boxContainer .box { width: 220px; /* 设置框的宽度 */ height: 175px; /* 设置框的高度 */ /**/ position: static; /* 设置定位 */ /* 设置四层边框，黑白黑白 */ /* box-shadow: 0 0 0 1.5px #000, 0 0 0 3px #fff, 0 0 0 4.5px #000, 0 0 0 6px #fff; */ /*添加了两条边框，颜色是随机的*/ border: 2.5px solid var(--border-color); box-sizing: border-box; outline: 2.5px solid var(--outline-color); outline-offset: -5.5px; /**/ border-radius: 25px; /* 设置圆角边框 */ margin: 6px; /* 设置框的外边距 */ display: inline-block; /* 设置框为内联块元素 */ cursor: pointer; /* 设置鼠标指针为手形 */ text-align: center; /* 设置文本居中对齐 */ color: none; /* 设置文本颜色 */ padding: 15px; /* 设置框的内边距 */ transition: transform 0.3s, background-color 0.3s, border-color 0.3s, outline-color 0.3s; /* 添加平滑的变换效果 */ background-color: transparent; /* 设置透明的背景颜色 */ } /* 鼠标悬停时的样式 */ #boxContainer .box:hover { transform: scale(1.25); /* 缩放效果 */ } /* 清除标题和链接的默认间距 */ #boxContainer h2, p { margin: 0; } /* 链接样式，去除下划线 */ #boxContainer a { text-decoration: none; color: none; } /* 设置主标题字体大小 */ #boxContainer .main-title { font-size: 20px; } /* 设置副标题字体大小 */ #boxContainer .sub-title { font-size: 15px; } /* 定义一个类名为alert的样式，用来设置框的位置，大小，颜色，边框等属性 */ /* 为noscript准备的样式 */ .alert { position: fixed; top: 0; left: 0; width: 100%; height: 50px; background-color: yellow; border: 2px solid red; text-align: center; color: blue; line-height: 50px; font-size: 20px; font-weight: bold; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; id=\u0026#34;boxContainer\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var container = document.getElementById(\u0026#39;boxContainer\u0026#39;); // 修改框内主标题与副标题 var textArray = [ \u0026#34;主标题|副标题\u0026#34;, \u0026#34;主标题|副标题\u0026#34;, \u0026#34;主标题|副标题\u0026#34; ]; // 修改指向链接 var linkArray = [ \u0026#34;https://example.com/\u0026#34;, \u0026#34;https://example.com/\u0026#34;, \u0026#34;https://example.com/\u0026#34; ]; // 生成随机颜色 function getRandomColor() { var letters = \u0026#39;0123456789ABCDEF\u0026#39;; var color = \u0026#39;#\u0026#39;; for (var i = 0; i \u0026lt; 6; i++) { // 限制随机数的范围，只取8到F之间的字符，这样颜色的亮度会更高 color += letters[Math.floor(Math.random() * 10) + 6]; } return color; } /*添加了两个变量，用来存储边框的颜色*/ var borderColor = getRandomColor(); var outlineColor = getRandomColor(); /*给根元素设置了两个CSS变量，用来传递边框的颜色*/ document.documentElement.style.setProperty(\u0026#39;--border-color\u0026#39;, borderColor); document.documentElement.style.setProperty(\u0026#39;--outline-color\u0026#39;, outlineColor); // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 var boxQuantity = 3; // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里在这里 // 遍历数组，生成框（如果要增加框的数量，就必须添加上面的标题和链接，然后更改 boxQuantity 的数值） for (var i = 0; i \u0026lt; boxQuantity; i++) { var parts = textArray[i].split(\u0026#34;|\u0026#34;); // 使用竖线分隔主标题和副标题 var box = document.createElement(\u0026#39;a\u0026#39;); // 创建一个链接元素 box.className = \u0026#39;box\u0026#39;; // 设置框的类名 box.href = linkArray[i]; // 设置链接的目标地址 // 创建主标题元素 var title = document.createElement(\u0026#39;div\u0026#39;); title.className = \u0026#39;main-title\u0026#39;; // 设置类名 title.innerText = parts[0]; // 设置文本内容 // 创建副标题元素 var subtitle = document.createElement(\u0026#39;div\u0026#39;); subtitle.className = \u0026#39;sub-title\u0026#39;; // 设置类名 subtitle.innerText = parts[1]; // 设置文本内容 // 创建包含标题和副标题的容器 var flexContainer = document.createElement(\u0026#39;div\u0026#39;); flexContainer.style.display = \u0026#39;flex\u0026#39;; // 使用弹性布局 flexContainer.style.flexDirection = \u0026#39;column\u0026#39;; // 垂直排列 flexContainer.style.alignItems = \u0026#39;center\u0026#39;; // 居中对齐 flexContainer.appendChild(title); flexContainer.appendChild(subtitle); // 将标题和副标题容器添加到框中 box.appendChild(flexContainer); // 将框添加到外部容器 container.appendChild(box); // 添加鼠标悬停事件监听器，以实现随机颜色效果 box.addEventListener(\u0026#39;mouseenter\u0026#39;, function() { var newBorderColor = getRandomColor(); var newOutlineColor = getRandomColor(); var newBackgroundColor = getRandomColor(); this.style.borderColor = newBorderColor; this.style.outlineColor = newOutlineColor; this.style.backgroundColor = newBackgroundColor; }); // 添加鼠标离开事件监听器，以恢复透明背景 box.addEventListener(\u0026#39;mouseleave\u0026#39;, function() { /* this.style.borderColor = borderColor; this.style.outlineColor = outlineColor; */ this.style.backgroundColor = \u0026#39;transparent\u0026#39;; }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 与此文章相关的还有： 如何在使用Hugo模版框架时在文章中嵌入HTML代码\n给博客的各种改动-记录以备忘\n如何给hugo添加评论系统\n关于waline的那些事\n","permalink":"https://charle00001.github.io/posts/my-page-others-and-tools/","summary":"我有一个页面：别的\u0026amp;工具 里面有很多框框 这个页面我觉得不错，源代码放出来看看 实现的效果： 大概就是把鼠标移上去之后“框”放大1.25倍（","title":"我添加的页面————别的\u0026工具"},{"content":"前言 在这里分享一下那些浏览器中的好用的扩展，基本上都支持 Chromium 内核和 Firefox 浏览器，如果仅支持【Firefox or Chromium】，我会另外说明.\n插件与扩展的区别 很多人搞不清楚扩展与插件的【区别】，甚至以为两者是一种东西，这个理解的错误是【大大滴！】.\n先看看插件： 插件的洋文是Plugin，与扩展不同. 插件是【相对来说较底层的】，我来举个例子：\n这是 Firefox 浏览器预装的插件：\n其中第一个是“OpenH264 视频编解码器”，没有这个插件我们【应该】就没办法看\u0026quot;OpenH264\u0026quot;的视频（我写“应该”是因为我没测试过）.\n后面的\u0026quot;provided by Cisco Systems, Inc.\u0026ldquo;的意思是“由思科公司提供”，思科大家肯定听说过吧.\n概述（和译文）：\nThis plugin is automatically installed by Mozilla to comply with the WebRTC specification and to enable WebRTC calls with devices that require the H.264 video codec. 译文： Mozilla 会自动安装此插件，以符合 WebRTC 规范，并与需要 H.264 视频编解码器的设备进行 WebRTC 通话。 第二个是 \u0026ldquo;Widevine Content Decryption Module\u0026rdquo;，由谷歌提供.\n概述：\nThis plugin enables playback of encrypted media in compliance with the Encrypted Media Extensions specification. Encrypted media is typically used by sites to protect against copying of premium media content. 译文： 该插件可根据加密媒体扩展规范播放加密媒体。加密媒体通常被网站用于防止复制优质媒体内容。 由此可见，这些插件的作用是比扩展重要的（你不装任何扩展也能正常看网页）.\n所以一旦插件本身【出现漏洞(bug)】，它的危险性比“扩展”大得多，因为它是一个相对底层的东西，能接触到的（权限）自然也比“扩展”大很多.\n扩展 扩展的洋文是Extension，不要和有一个叫做 \u0026ldquo;Add-on\u0026rdquo; 的搞混了。\nAdd-on 是 Plugin 和 Extension 的统称，（Mozilla 的解释）.\n推荐扩展： 1. uBlock Origin——最nb的广告过滤器，广告已成往事 点此进入 | Click here to enter\n2. 扫盲“用户代理” + 推荐扩展：User-Agent Switcher——切换自己的用户代理，拒绝浏览器指纹追踪 （这篇文章主要讲用户代理）\n点此进入 | Click here to enter\n","permalink":"https://charle00001.github.io/posts/browser-addons-and-plugin/","summary":"前言 在这里分享一下那些浏览器中的好用的扩展，基本上都支持 Chromium 内核和 Firefox 浏览器，如果仅支持【Firefox or Chromium】，我会另外说明. 插件","title":"浏览器扩展推荐系列[0]——目录，顺便聊聊“插件”"},{"content":"此文章已失效。\n","permalink":"https://charle00001.github.io/posts/add-live2d-caretaker/","summary":"此文章已失效。","title":"添加Live2d看板娘(Hugo)"},{"content":"这是一个二级标题。 Although / Even though / In spite of / Despite 这四个词中Although和Even though是一伙的（光看这个词就知道），In spite of 和Despite是一伙的.\n从用法上来看，刚刚以“光看这个词来分组”的方法也是对的，下面说一下区别：\nAlthough\n用法：用于引导一个从句，该从句与主句形成对比.\n例句：Although it was raining, they decided to go for a walk.\nEven though\n用法：同上，但是更强烈的对比.\n例句：Even though it was raining, they decided to go for a walk.\n总的来说，\u0026ldquo;Although\u0026rdquo; 和 \u0026ldquo;Even though\u0026rdquo; 都是用来引导让步状语从句，表示尽管条件存在，但主句情况仍然成立.\n那什么是一个“从句”呢？\n以 Although 的例句来举例，这时的从句就是Although it was raining，但是光一个从句并【不】是一个完整的句子，它必须和“主句”合并【才能】形成完整的句子.\n这时，主句就是they decided to go for a walk.\nIn spite of\n用法：后面通常接名词或代词或动名词短语，形成一个介词短语.\n例句：In spite of the rain, the picnic was a success.\nDespite\n用法：同上，但是比上面的更正式一点.\n例句：Despite the rain, the picnic was a success.\n最重要的一点：\n\u0026ldquo;In spite of\u0026rdquo; 和 \u0026ldquo;despite\u0026rdquo; 后面通常接名词或动名词短语，而 \u0026ldquo;although\u0026rdquo; 和 \u0026ldquo;even though\u0026rdquo; 后面通常接主语和动词.\n比如 \u0026ldquo;Although it was raining, they decided to go for a walk\u0026rdquo; 这句句子里的“从句”里面包含的 \u0026ldquo;it was raining\u0026rdquo; 就是主语 + 动词.\n而 \u0026ldquo;In spite of the rain, the picnic was a success\u0026rdquo; 这句句子里的“从句”里面包含的 \u0026ldquo;the rain\u0026rdquo; 就是名词.\n不明白什么是「从句」的，请往回看 :)\n","permalink":"https://charle00001.github.io/posts/although-even-though-in-spite-of-despite-what-is-the-difference/","summary":"这是一个二级标题。 Although / Even though / In spite of / Despite 这四个词中Although和Even though是一伙的（光看这个词就知道），In spite of 和Despite","title":"Although, Even though, In spite of, Despite 都有啥区别？"},{"content":"为什么需要学习 Git ？ 由于我们大家都需要使用 GitHub 这种普世产品，所以我们必须学会使用Git.\nGit 是什么？ Git 是一种分布式开源版本控制系统，可以用它存储代码、跟踪修订历史记录、合并代码更改，并在需要时恢复为较早的代码版本.\nGit 将你的源代码及完整的开发历史记录存储在本地存储库中. 你可以创建称作分支的源代码副本，然后与主版本并行作业.\n上面那段话很长，可能听不太懂. 你只要记住：这玩意就是用来管理代码仓库的.\n第一步：安装 Git 官网：在这里\nWindows Git For Windows的官网在“这里”\n官方下载页面在“这里”\nWindows 下的 Git 被称作\u0026quot;Git Bash\u0026quot;.\n这是由于 Windows 不是 Unix 系统，通常系统中没有人们熟悉的 Shell 环境.\n但是当你安装了 Git 在 Windows 里打开之后，它会给你一个bash环境，让你使用 Shell 这个好东西.\n所以它也是 Git Bash.\nMac Mac 相对于 Windows 的话安装比较简单（甚至根本不用安装，因为如果你安装了 Xcode 命令行工具的话，会自带 Git）\n有好几种安装方法：\n安装整个 Xcode\n（及其【不】推荐. 如果你不是 Mac App/iOS App 的开发者的话，安装这个完全没必要，因为安装 Xcode 需要至少20GB的可用空间） AppStore 链接：在这里\nApple 官网链接：在这里\n安装 Xcode 命令行工具（推荐安装，因为这玩意很小，只有大约1GB多一点）\nMac 终端运行命令： xcode-select --install 使用 Homebrew 或者 MacPorts 安装：\n运行命令： brew install git # Homebrew安装 sudo port install git # MacPorts安装 Sourceforge 安装包\nGit 官方在 Sourceforge 上提供了 Git 安装包，适合新手安装. 下载：在这里\n提示：Sourceforge 已被墙，建议翻墙.\n关于如何翻墙请见我的这篇文章：在这里\n还有一些安装方法，比如从源代码构建. 本文不叙述这些进阶方法，请看“这个”页面. Linux 由于 Linux 发行版太多了，所以这里列出一些：\nDebian/Ubuntu\napt-get install git # 或者 apt install git Fedora\nyum install git # 或者 dnf install git Arch Linux\npacman -S git FreeBSD\npkg install git OpenBSD\npkg_add git Alpine\napk add git 别的Linux\n可以去这里获取源代码自己构建.\n一些最有用的命令 我们大家一般人不需要对仓库有太复杂的命令和更改，除非你在维护一个长期更新的代码库.\n下面讲列出并讲解那些最常见、最有用的命令.\ngit init 这个命令是初始化一个本地仓库. 这个操作通常会在当前文件夹中创建.git隐藏文件夹，请勿删除.\n什么是本地仓库？ 本地仓库就是一个仓库，但是在本地. 你如果要把一个更改推送到 GitHub 的远程仓库，你需要先在本地仓库提交一个更改，然后再推送.\ngit remote 常用子命令： 用法：\ngit remote add 这个命令是让本地仓库关联到远程仓库. 当你的本地仓库与一个远程仓库关联时，你可以把本地仓库的代码/文件推送到远程仓库（或者把远程仓库的更改拉取到本地）.\ngit remote add origin git@github.com:username/example.git # 通常是origin，改成其他的也行 # 后面的是远程仓库的ssh地址 git remote remove 这个命令是删除本地仓库与远程仓库的关联.\n用法：\ngit remote remove origin # 通常是origin，如果不对的话去看看上一条子命令你就明白了 git remote -v 使用这条命令查看当前本地仓库关联的远程仓库（或者没有关联）.\ngit add\n这个命令很有用，是把当前本地仓库的所有更改（包括文件更改、删除文件、新建文件等等）都添加到“暂存区”（也叫索引，Git 官方网站解释）. 如果没有这一步 Git 就不知道你把文件更改了，也不会把你更改的内容推送到远程仓库.\n常用子命令：\ngit add . # 或者 git add -A # 还有一个 git add * 把更改记录进暂存区.\n两条命令的区别在于git add .必须在本地仓库的根目录运行才能生效，git add -A在仓库的子目录也能生效.\n第三条命令后面的*是通配符，即忽略.gitignore文件强制将所有文件添加到索引（或暂存区）.\ngit commit\n创建一个新的提交，包含索引（暂存区）的当前内容和描述变化的给定日志信息. 这个提交会更新本地仓库的代码，包括了你所有修改/添加过的文件（需要配合git add命令生效）\n常用子命令：\ngit commit -m \u0026#34;在这里填上你的备注\u0026#34; # 添加备注并提交代码（不是推送到远程仓库！！） 悄悄告诉你下面的这条命令：\ngit commit --allow-empty 这条命令允许你什么都不更改就创建一个提交. 只是为了刷仓库提交次数而已.\n你可以用while true写一个 Shell script，让它源源不断的提交，等个半分钟你就有几千个提交数了.\n当你把这个脚本挂在那半小时，我都想不到那提交数有多恐怖.\n然后再把它推送到远程仓库（像 GitHub、Gitlab），你就会发现你的仓库有超多 commit ，前提是 GitHub 不封你号（应该不会，因为这对 GitHub 没啥影响，除非 commit 数能换钱）\ngit push\n将本地仓库新的提交推送至远程仓库. 当你在本地仓库创建了一个新的提交后，这条命令将这个提交中的所有更改推送至远程仓库.\n通常推送传输完成之后很快就能看到远端的代码已更新.\n注：这个操作通常需要网络，除非你的代码库就在 localhost 上.\n常用子命令：\n","permalink":"https://charle00001.github.io/posts/using-git-and-how-to-solve-simple-problems/","summary":"为什么需要学习 Git ？ 由于我们大家都需要使用 GitHub 这种普世产品，所以我们必须学会使用Git. Git 是什么？ Git 是一种分布式开源版本控制系统，可以用它存储代","title":"Git的使用以及如何解决一些简单问题（未写完，懒）"},{"content":" 可惜你啥都看不到的，我早就把文章删掉了\n即使禁用js\n不过我猜你用了Noscript\n是的\n不是\n6\n带我离开！ ","permalink":"https://charle00001.github.io/posts/how-to-get-freegate-ultrasurf-freebrowser-geph/","summary":"可惜你啥都看不到的，我早就把文章删掉了 即使禁用js 不过我猜你用了Noscript 是的 不是 6 带我离开！","title":"此文章已删除！"},{"content":"Tor 概述 Tor 是 \u0026ldquo;The Onion Router\u0026rdquo; 的缩写，中文洋葱路由. 可以在被严重封锁、审查互联网的地区翻墙.\n此外，它还是一个极好的匿名工具，而且它的设计的初衷并不是为了翻墙的. 有很多需要匿名的人都会使用它.\n安全性 它的安全性非常高，因为它有几个特点：\n用它传输的内容是强加密的（意思是只能暴力破解，不存在“投机取巧”的破解，比如加密算法有漏洞）.\n使用 Tor 时，Tor 会让你的流量（强加密过的）随机经过 3个 Tor 节点，称为 “入口节点、中间节点和出口节点”，这大大降低了发现你本人的风险.\n流量的传输步骤： 在那些节点中，数据以一种叫做“洋葱路由”的方式进行传输，数据首先在用户端连续加密三层，而三个中继各自解密一层，这样它们就能知道接下来把数据传送给谁.\n最后的出口节点会【解密】最内层的加密数据并得到【真实的】数据内容，并把它传送给目标地址.\n一些疑问\u0026amp;弊端： 1. 入口节点｜有泄露 IP 地址的风险 在这三个节点中，入口节点会知道你的 IP，但是不知道你的流量内容.\n如果担心自己的 IP 在入口节点泄露，可以使用代理服务器来连接 Tor 网络（简称：前置代理，具体方法上网查）.\n2. 出口节点｜有泄露流量内容的风险 出口节点能看到你的流量. 但是它不知道你的 IP.\n出口节点虽然能【看到你的流量】，但是还是没办法解密 Https 的流量内容.\n所以我们的解决办法就是 “多使用 Https，开启浏览器的 Https-Only 模式”，毕竟除了 Tor 的流量加密，Https 流量也是“强加密”的.\n3. 中间节点｜【啥也不知道】 当然，中间节点是最安全的，它两样都不知道（只要你的 Tor 客户端没被植入后门）.\n关于 Tor 的详细解释，请参见“这里”\n官网：点此进入\n声明：以下内容的 \u0026ldquo;Tor\u0026rdquo; 全都指的是 Tor Browser Bundle，并不是Tor Expert Bundle（裸 Tor） 这两个的区别是：\n前一个是\u0026quot;Tor Browser Bundle\u0026quot;（严格来讲）包含了一个浏览器（安全加固之后的 Firefox Esr），适合小白使用\n（一打开就跳出一个浏览器，现连现用）\n而 \u0026ldquo;Tor Expert Bundle\u0026rdquo;（也叫 裸Tor）不包含浏览器，需要自己配置端口，而且没有图形界面，对新手不友好.\n直接获取 下载页面：点此进入\n官网早就被墙了，所以我们还有别的方法来获取Tor.\n官方镜像站 下载页面：镜像站点一\n下载页面：镜像站点二\n不出意外的话，这俩站也被墙了.\nGetTor GetTor 是一项消息自动回复服务，提供托管在各种网站上最新版 Tor 浏览器的链接，如 Dropbox、Google Drive 和 GitHub.\n如何使用 GetTor？\n1、电子邮件\n发送标题为\u0026quot;help\u0026quot;的电子邮件到gettor@torproject.org邮箱，不出意外的话会立即收到 GetTor 的回信.（千万千万不能用国内邮箱. 在国内靠谱的邮箱只剩 Outlook 了）\n根据回信再发一封邮件，比如现在的回信是：\n[GetTor] Help Email This is an automated email response from GetTor. GetTor can send you download links for Tor Browser. Simply reply to this email and write the operating system you want to install Tor Browser on in your response. We support the following operating systems: win osx osx64 mac android linux lin windows android-aarch64 win64 linux64 linux32 android-armv7 win32 android-x86_64 macos android-x86 GetTor will then respond with download instructions. For example, if you want Tor Browser for Windows your email content will look like: windows 看到那个长长的列表了吗？那个列表就是Tor支持的系统. 你只要再发一封邮件过去，邮件内容中填写列表里的任何一项，你就会获得下载链接.\n就像这样： 不出意外的话会收到：\n我的回信是：\nThis is an automated email response from GetTor. You requested Tor Browser for linux64. Step 1: Download Tor Browser First, try downloading Tor Browser from our mirrors: Google Drive: https://drive.google.com/uc?id=1sZf7OgXP9qeFUBNEuMGMfcBAg9PM2RaK\u0026amp;export=download Signature file: https://drive.google.com/uc?id=1ynMP_bNpJ3L30lpE9NC11isD7e93H3EH\u0026amp;export=download archive_org: https://archive.org/download/torbrowser-13.0.1-0c9a9e3931645dac/tor-browser-linux-x86_64-13.0.1.tar.xz Signature file: https://archive.org/download/torbrowser-13.0.1-0c9a9e3931645dac/tor-browser-linux-x86_64-13.0.1.tar.xz.asc ...... ...... 注意看Step 1，里面的链接是 Tor 最新版的下载地址.\nTelegram 上的 GetTor\n可在 Telegram 上向 @GetTor_bot 发送请求来获取 Tor 浏览器：https://t.me/gettor_bot\n（Telegram 被墙了）\n另一个方法：GitHub 源代码构建 TorProject 官方仓库：在这里\n没错，直接从源代码构建！\n打开终端.\n步骤：\ncd ~ #一个你觉得合适的目录，比如自己的用户目录 git clone https://github.com/torproject/tor.git ./autogen.sh ./configure make make install 每一条命令执行完就执行下一条.\n或者，从我这下载？？？？ 考虑到了有可能我会给你们的Tor里添加病毒什么的，所以你必须验证文件的数字签名.\n（偷个懒，我直接把Tor官网的那页HTML下载下来给你们看吧）\n点此进入\n请到顶栏----\u0026gt;其他\u0026amp;工具----\u0026gt;Tor\u0026amp;I2P来获取.（以后可能还有新的方式，但是如果我现在在这里写了以后还要一篇一篇改）\nI2P I2P 是什么？ I2P 是英文\u0026quot;Invisible Internet Project\u0026quot;的缩写. 它的中文名称是“大蒜路由”.\n它基于重叠原理，即匿名和安全层在另一个网络之上运行. I2P 的主要特征之一是去中心化，因为该网络上没有DNS服务器，它们被自动更新的“地址簿”所取代.\n它也是一种匿名网络，是 Tor 的改进版，缺点是速度慢，但是安全性很高. I2P 的暗网网站叫\u0026quot;eepsites\u0026quot;，想要建这样一个网站很方便，因为不需要公网IP服务器.\n安全性很高，大于Tor I2P 使用【多条网路链路】传输数据，而Tor仅使用【单条网路链路】传输数据. 这样做能极大的提升【网络层面】的安全性，所以速度非常慢. 但是如果你真的想隐藏自己的身份，多等一会又有什么关系呢？\n每个用户的电脑都是一个中继节点，每个用户都在共享带宽，帮别人转发数据. 这对隐藏身份很有效.\n突破封锁效果好，很难被封锁 由于 I2P 去中心化的特点，I2P 比 Tor 更坚挺，几乎在封锁最严重的地方都可以连接.\nTor 在启动时需要先连接到“目录服务器”获取【可用的】节点，而且目录服务器比较【少】. 只需要把目录服务器【封锁】掉，你就获取不到节点，连不上；\n后来 Tor 提供了“网桥中继”，但是它的数量也不怎么多，所以当这些中继也被干掉之后，你也连不上（后来 Tor 提供了meek插件借助于大公司的威慑才能成功连接）.\nI2P 借助于 Kad 网络来获取网络节点的信息，所以不需要目录服务器，而且拿到的节点信息只是整个I2P网络的一小部分.\n建议搞一个备用，万一哪天所有翻墙软件都失效，依靠I2P坚挺的特性还可以去下载其他翻墙软件的新版本.\n另：现在 I2P 也没办法拿到网络节点的信息了，所以需要下面的“从文件补种”.\n（这多亏了我们亲爱的 GFW）\n下载 I2P 请在这个页面获取更详细的说明！ 官网：点此进入\n备用官网2：点此进入\nI2P 也被墙了，不过可以在这个页面下载 I2P。 Linux 和 Mac 需要安装 Java，在这里\n安装完 Java 才可以安装 I2P.\nI2P补种（长期更新种子文件） I2P的种子文件我放在这里了. 哪一天失效了，请联系我 （用电子邮件） ，我会补上新的种子文件或种子链接.\n种子文件：在这里下载 | 或者去github或onedrive。\n启动I2P打开http://127.0.0.1:7657/configreseed，看到“从文件补种”，然后下载种子文件并导入（或者输入种子文件url）\n我的E-mail：在友情链接页面.\n与此文章相关的文章： 如何获取翻墙软件？（长期更新）\n如何获取自由门、无界、自由浏览、迷雾通\n","permalink":"https://charle00001.github.io/posts/how-to-get-tor-and-i2p/","summary":"Tor 概述 Tor 是 \u0026ldquo;The Onion Router\u0026rdquo; 的缩写，中文洋葱路由. 可以在被严重封锁、审查互联网的地区翻墙. 此外，它还是一个极好的匿名工具，而且它的设计的初衷并不是为了翻","title":"Tor和I2P是什么？如何获取Tor和I2P？"},{"content":"起因 由于昨天写了一篇关于如何翻墙的文章（我很纠结要不要继续写下去），所以为了自身以后的安全问题，我给它加了一个弹窗来保命（你们怎么选就不关我的事了）.\n这个JavaScript其实我不知道怎么加，不过后来总算是把这个搞成了，今天我来分享下.\nso，咋搞的呢？ 我以前使用的博客系统是Hexo，要是想在markdown文章里加入html代码，那就直接加就行；运行的也嘎嘎流畅.\nHugo就不这样. 因为Hugo的Markdown渲染器会自动忽略Html代码（\u0026lt;br\u0026gt;什么的不算），我认为这个渲染器小心过头了（Html又咋样）.\n不过虽然要在文章里嵌入html的人很少（而且Hugo的用户量没有Hexo的多），我也找到了两个方法.\n方法一\u0026mdash;\u0026mdash;配置文件修改大法 在配置文件hugo.yaml里添加几条：\nmarkup: goldmark: renderer: unsafe: true 我也是吐了：\u0026ldquo;unsafe\u0026quot;是什么鬼？？？自己的博客自己还会添加恶意代码吗？？？\n这个方法应该是简单的一个了，还有一个方法，虽然麻烦一点点，但是我也说一下吧.\n方法二\u0026mdash;\u0026mdash;shortcode，启动！！ 众所周知，Hugo里有一种叫做\u0026quot;shortcode\u0026quot;的玩意（我也不知道是啥，反正这玩意挺有用就对了）. 依靠这玩意的功能，我们也可以在文章中嵌入html代码.\n在博客根目录/layouts下新建shortcode文件夹，然后新建raw.html.\n打开raw.html，在里面写入下面那行玩意：\n{{ .Inner }} 这里说一下原理：Hugo的shortcode功能允许你创建shortcode，中文直译就是“短代码”. 这个东西合理配置能发挥很多功能，就像上面的那行.\n如果你在文章中要嵌入Html代码，直接把代码复制进去然后用{{\u0026lt;raw\u0026gt;}}和{{\u0026lt;/raw\u0026gt;}}括起来就行.\n比如： 把上面的玩意嵌入文章，就能用了. 中间的html可以自由发挥.\n（Q：为什么要用图片？ A：因为这玩意六亲不认。把它放在markdown代码块、html注释和Hugo短代码注释中居然还能执行里面的html。。。）\n（Q：那你是怎么打出上面的{{\u0026lt;raw\u0026gt;}}和{{\u0026lt;/raw\u0026gt;}}的？ A：使用转义代码。实际上我这边是这样的：{{\u0026amp;lt;raw\u0026amp;gt;}}和{{\u0026amp;lt;/raw\u0026amp;gt;}}）\n与此文章相关的还有： 如何给hugo添加评论系统\n第一次来到hugo的第一篇博文\n给博客的各种改动-记录以备忘\n","permalink":"https://charle00001.github.io/posts/how-to-embed-html-code-in-articles-when-using-the-hugo-template-framework/","summary":"起因 由于昨天写了一篇关于如何翻墙的文章（我很纠结要不要继续写下去），所以为了自身以后的安全问题，我给它加了一个弹窗来保命（你们怎么选就不关我","title":"如何在使用Hugo模版框架时在文章中嵌入HTML代码"},{"content":"对博客的魔改 这篇文章不仅仅是备忘录，如果有人认为这些改动不错，可以放到自己博客里。 仅限 PaperMod 主题，在这里 记录以备忘 添加版权信息 复制主题/layouts/partials/footer.html的文件到博客根目录/layouts/partials/footer.html.注释原来被包裹在了一个Hugo模板语言的if语句中的内容.\n{{- if not (.Param \u0026#34;hideFooter\u0026#34;) }} \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; {{- if site.Copyright }} \u0026lt;span\u0026gt;{{ site.Copyright | markdownify }}\u0026lt;/span\u0026gt; {{- else }} \u0026lt;!-- \u0026lt;-----就是这样注释 \u0026lt;span\u0026gt;\u0026amp;copy; {{ now.Year }} \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | absLangURL }}\u0026#34;\u0026gt;{{ site.Title }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; --\u0026gt; {{- end }} .......等等 \u0026lt;/footer\u0026gt; 现在跳过if语句，在{{- end }}后面添加了刚刚注释掉的代码，并且添加了2020（本博是2020年搭建的，虽然后来的两年啥也没写，到最后才想起有个博客，如果你们也要添加初始年份把2020改掉就行）.\n原代码为：\n\u0026lt;span\u0026gt;\u0026amp;copy; {{ now.Year }} \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | absLangURL }}\u0026#34;\u0026gt;{{ site.Title }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; 现代码为\n\u0026lt;span\u0026gt;\u0026amp;copy;2020-{{ now.Year }} 保留所有权利. \u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | absLangURL }}\u0026#34;\u0026gt;{{ site.Title }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; 添加了2020、保留所有权利。\n添加站点稳定运行时间 在下面增加：\n\u0026lt;!-- 网站稳定运行时间 --\u0026gt; \u0026lt;span id=\u0026#34;sitetime\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;script language=javascript\u0026gt; function siteTime(){ window.setTimeout(\u0026#34;siteTime()\u0026#34;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth()+1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2020, 5, 3, 0, 0, 0); // 修改时间，主要前三项 var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond); var diff = t2-t1; var diffYears = Math.floor(diff/years); var diffDays = Math.floor((diff/days)-diffYears*365); var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours); var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes); var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML=\u0026#34; 小站已运行稳定 \u0026#34;+diffYears+\u0026#34; 年 \u0026#34;+diffDays+\u0026#34; 天 \u0026#34;+diffHours+\u0026#34; 小时 \u0026#34;+diffMinutes+\u0026#34; 分钟 \u0026#34;+diffSeconds+\u0026#34; 秒\u0026#34;; } siteTime(); \u0026lt;/script\u0026gt; 如果添加完成之后发现他和别的页脚文字变到了一行，在代码前增加\u0026lt;br\u0026gt;即可.\n这是从别的网站【剽窃】的，原文链接：https://zevs6.gitee.io/2019/08/16/Hexo-%E9%A1%B5%E8%84%9A%E5%A2%9E%E5%8A%A0%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E7%BB%9F%E8%AE%A1/\n（只不过从 Hexo 变到了 Hugo，我其实没什么功劳）\n添加 DMCA 版权保护徽章 还是在此文件中，上面那行代码之后添加了 DMCA.com 中的版权声明，若添加此声明，DMCA.com 组织将免费联系盗窃/不合规转载文章的人删除文章。\n（此处不展示代码内容，如果你也想添加 DMCA 的版权保护徽章，可以去它的官网免费获取。\nhttps://www.dmca.com/Badges.aspx\n取消由XXX、XXX强力驱动的字样。 还是在此文件中，查找Powered by，注释了“由 Hugo、Papermod 强力驱动“字样。\n\u0026lt;!-- \u0026lt;span\u0026gt; Powered by \u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; \u0026amp; \u0026lt;a href=\u0026#34;https://github.com/adityatelange/hugo-PaperMod/\u0026#34; rel=\u0026#34;noopener\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;PaperMod\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; --\u0026gt; 自定义 404 页面 在博客根目录/layouts下新建404.html文件，写入\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;text-align:center\u0026#34;\u0026gt;404\u0026lt;/p\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;br\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;p style=\u0026#34;text-align:center\u0026#34;\u0026gt;You are lost.\u0026lt;/p\u0026gt; \u0026lt;/h2\u0026gt; \u0026lt;br\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | relURL }}\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;text-align:center\u0026#34;\u0026gt;Click To Go Home.\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} html文件可以更改为你自己喜欢的404页面，或者去谷歌搜索404页面模板找一个好看的.\n添加搜索引擎网站验证 HTML 元标记 打开总配置文件，添加一条analytics.google.SiteVerificationTag: 你的google元标记后面的content里面的内容，注意冒号后面要留空格.\n添加评论系统 此改动见另一篇文章点此进入\n在不破坏 Hugo 模板框架的情况下在页面/文章中加入html代码 请参见这篇文章\u0026mdash;\u0026mdash;在这里\n自定义顶栏 这个很简单，只要在配置文件hugo.yaml/hugo.toml/hugo.json中加上（不要加在params下）：\n# 在页面上方加入菜单 menu: main: - name: 首页 url: / # 通常根目录为首页 weight: 1 # weight越小，越靠前 - name: 标签 url: tags/ weight: 2 - name: 分类 url: categories/ weight: 3 - name: XXX url: XXX weight: 4 # XXX什么的自定义，要加别的和这个一样写 toml和json可以去寻找yaml to toml/json转换器.\n我添加的页面：别的\u0026amp;工具 请看这篇文章：这里\n添加live2d角色 请看这篇文章：这里\n最后 如果要自定义一些博客内容，只需要复制主题/layouts/partials里面的html文件（如footer.html）到博客根目录/layouts/partials里面然后更改它的内容就可以了. 这么做不仅可以不破坏主题原本的代码，还能成功自定义.\n与此文章相关的还有： 如何在使用Hugo模版框架时在文章中嵌入HTML代码\n第一次来到hugo的第一篇博文\n如何给hugo添加评论系统\n我添加的页面————其他\u0026amp;工具\n","permalink":"https://charle00001.github.io/posts/various-changes-to-the-blog-recorded-for-memorization/","summary":"对博客的魔改 这篇文章不仅仅是备忘录，如果有人认为这些改动不错，可以放到自己博客里。 仅限 PaperMod 主题，在这里 记录以备忘 添加版权信息 复制主题/layo","title":"给博客的各种改动-记录以备忘（Hugo + papermod）"},{"content":"给博客添加的各种改动\u0026mdash;评论系统篇 目标：添加评论系统（waline/disqus） 尽管我们重点要说waline和disqus，但是只要看懂了这篇文章什么评论系统都可以加. 大家搭建博客时应该经常希望添加一个评论系统吧.\n本博客使用Hugo + Papermod，其他主题不知道能不能成功适配.\n第一部分\u0026mdash;配置 先将总配置文件的params下加一条comments: true.（其他格式toml、json可以去找配置文件转换器）\n在博客根目录/layouts下新建文件夹partials/，新建文件comments.html.\n使用papermod主题的去博客根目录/themes/PaperMod/layouts/partials/comments.html找到此文件复制其内容.\n{{- /* Comments area start */ -}} {{- /* to add comments read =\u0026gt; https://gohugo.io/content-management/comments/ */ -}} {{- /* Comments area end */ -}} 别的主题应该也有这个文件，自己去找找吧（有可能里面的内容与papermod的不一样，但是总体配置方法应该很相似，稍微折腾一下吧）\n我看了一下，许多主题集成了许多评论系统，Disqus、waline、gitalk应有尽有，故不需要看这篇文章.（比如stack、loveit等等）\n将复制的内容放到刚刚创建的博客根目录/layouts/partials/comments.html，删掉中间行{{- /* to add comments read =\u0026gt; https://gohugo.io/content-management/comments/ */ -}}.\n然后将下面的代码复制到{{- /* Comments area start */ -}}和{{- /* Comments area end */ -}}的中间.\n\u0026lt;div class=\u0026#34;XXX\u0026#34;\u0026gt; {{ partial \u0026#34;XXX.html\u0026#34; . }} \u0026lt;/div\u0026gt; 添加waline 还是在博客根目录/layouts/partials下，创建waline.html.\n根据waline官方文档配置leancloud数据库和Vercel部署（我这里小小的偷个懒，毕竟我写的再详细也没有它的文档详细，而且我按照它的配置来也没有什么大坑）\n点此进入\n虽然这里不写详细教程了，但是我还要给大伙提个醒：不要用leancloud国内版，很麻烦（而且众所周知一些国外软件的中国特供版都不是什么好东西，比如tom-skype，北京谋智firefox等等）\nVercel被墙了，所以我正在想解决方案.\n配置好leancloud和vercel之后下一步复制点此进入的html代码. 将html代码写入刚刚创建的waline.html.\n\u0026lt;head\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@waline/client@v2/dist/waline.css\u0026#34; /\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v2/dist/waline.mjs\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://your-domain.vercel.app\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 将serverURL后面的链接改成你部署好的vercel网站的链接.\n再在init下加一条dark: 'body.dark',，不要问我为什么. 如果你的网站有暗黑模式，你不加这一条不难看死你.\n对于网速不好的同学，可以把unpkg的css、mjs文件下载好放到博客根目录/static静态资源文件夹中再把链接改为本地文件链接.\n打开博客根目录/layouts/partials/comments.html，将XXX改为waline，XXX.html改为waline.html，引入刚刚写好的文件.\nwaline配置成功 添加Disqus 注册，复制disqus的html部署代码，像上面那样新建disqus.html，然后用comments.html引入.（小小的偷个懒，毕竟过程很简单，不可能有坑，除非是网络问题）\n与此文章相关的还有： 如何在使用Hugo模版框架时在文章中嵌入HTML代码\n第一次来到hugo的第一篇博文\n给博客的各种改动-记录以备忘\n我添加的页面————其他\u0026amp;工具\n","permalink":"https://charle00001.github.io/posts/how-to-add-a-comment-system-to-a-hugo-blog/","summary":"给博客添加的各种改动\u0026mdash;评论系统篇 目标：添加评论系统（waline/disqus） 尽管我们重点要说waline和disqus，但是","title":"如何给Hugo博客添加评论系统"},{"content":"我本来要用Disqus的，但是换成了waline.\n我认为他们两个各自有各自的好处，也不能说waline一定比disqus好.\nwaline需要自己搭建，一般人用vercel，少数人用cloudbase/其他；而vercel被墙了（印象中是被墙了，不知道现在恢复了没有）\ndisqus【绝对被墙】，不过如果翻墙的话【很稳定】.\nVercel给我的感觉是【不怎么快速\u0026amp;有些时候不咋稳定】，而且waline需要的unpkg很慢（国外加载的也不快）\n但是我还是选了waline，原因是——自己折腾挺有意思的。\n不知道为什么waline开始抽风\n在暗色模式下评论框为刺眼白色评论而且文字与背景颜色相近，根本看不清\n在浅色模式下正常工作\n2023/10/26\n2023/10/30 逛GitHub issue时发现了解决方法并且写了一篇博客，在这里\n如果懒得去在文章里找（那篇文章不仅仅是这个bug）.\n把dark: 'body.dark',加入博客根目录/layouts/partials/你的comments.html或者看我上面那篇文章来把它搞好(waline).\n过了一会又提示报错，发不了评论.\n这个报错时好时坏（我写的时候又测试了一下，发了两条评论，前两条成功发出，第三条又报错）.\nundefined [525 GET https://uqqkzsak.api.lncldglobal.com/1.1/classes/Users] 上面的报错问题我不知道怎么回事.\n应该是一些东西在抽风，没办法:(\n好像是leancloud在抽风，看域名就知道了（lncld就是leancloud，global就是全球的意思）\n为了不用再加载一遍unpkg的css和mjs，我把这两个文件下载下来了\n而且格式化了一下\n这里\n这里\n与此文章相关的还有： 如何在使用Hugo模版框架时在文章中嵌入HTML代码\n给博客的各种改动-记录以备忘\n如何给hugo添加评论系统\n我添加的页面————其他\u0026amp;工具\n","permalink":"https://charle00001.github.io/posts/something-about-waline/","summary":"我本来要用Disqus的，但是换成了waline. 我认为他们两个各自有各自的好处，也不能说waline一定比disqus好. waline需要","title":"关于waline的那些事"},{"content":"关于迁移博客的声明 经过了一番深思熟虑之后，我将 Hexo 的博客迁移到了 Hugo. 真心希望Hugo能简单好用，毕竟我迁移的目标就是博客简单明了，主题设置简洁. 我折腾 Hexo NexT 主题正是折腾的够够的了，这几年折腾那些乱七八糟的美化设置已经废了半条命\u0026hellip;\u0026hellip; 当然，对于不喜欢折腾只想安心写文章的人来说，下面的东西都是p话，请忽略. \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;华丽的分割线\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\nNexT 主题的折腾点： 1 _config.yml 这个还算简单，折腾起来不算难.只要把那个长的要命的配置文件从头到尾耐心看一遍，就能配置完成. 2 暗色模式 这个也算简单 3 style.styl 博客透明化，自定义滚动条等等等等。。。。 4 css、js 自定义鼠标、鼠标点击爆炸效果、鼠标点击显示文字、鼠标移动撒落效果，满满的坑啊. 5 其他的奇奇怪怪的玩意 我只说了很小一部分.还有live2d，自定义版权声明、自定义板块与边缘距离，标签云\u0026hellip;\u0026hellip;.. \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;华丽的分割线\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\n我只能说，没折腾过 Hexo 的，特别是没折腾过各大主题的，绝对不理解这些痛. 还有：如果你要更新这个主题，很多修改都失效. 想象一下，你好不容易搞完，废了半条命看了一篇又一篇的博客.一更新，50%都失效了.无能狂怒\u0026hellip; 如果你希望把博客搞的花里胡哨一点的，就不要用 Hexo.当你开始用的时候，你就掉进一个无底洞里了. 其实 Hugo 也有折腾的空间，但是当我们要更改“主题的代码”时，可以不动原来的主题文件夹，将你要改的文件复制出来一份放到另一个文件夹里更改它，这样做也会生效，不像 Hexo 那样直接更改主题文件夹 更多内容请见这篇文章\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;华丽的分割线\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\n更新问题 许多次我提到了上面的\u0026quot;更新\u0026quot;，以为打一条npm命令就行了？ 步骤： clone 新版本 打开任意编辑器的文件对比功能，对比新 _config.yml 和旧 _config.yml 的区别，一条一条配置新文件 自定义的 css、js、以及上面提到的乱七八糟的玩意都有几率失效 那怎么办，上网找吧！这个博客是两年前的文章，抬走！！什么，你说没了？用谷歌搜索也找不到？？？？？？ 整套东西搞完已经四个小时过去了. 上网找，找不到；好好好，不折腾了！！！我走，我走好了吧！！！Hugo，我来啦！！ 与此文章相关的还有： 如何在使用Hugo模版框架时在文章中嵌入HTML代码\n给博客的各种改动-记录以备忘\n如何给hugo添加评论系统\n关于waline的那些事\n发布第一篇在Hexo个人博客（旧） 我添加的页面————其他\u0026amp;工具\n","permalink":"https://charle00001.github.io/posts/first-time-to-hugo-s-first-blog-post/","summary":"关于迁移博客的声明 经过了一番深思熟虑之后，我将 Hexo 的博客迁移到了 Hugo. 真心希望Hugo能简单好用，毕竟我迁移的目标就是博客简单明了，主题设置简洁.","title":"第一次来到Hugo的第一篇博文"},{"content":" 刚刚弹窗的代码： \u0026lt;script\u0026gt; function showDisclaimer() { // 检查是否存在名为 \u0026#34;disclaimer\u0026#34; 的 Cookie var disclaimerCookie = getCookie(\u0026#34;disclaimer\u0026#34;); if (disclaimerCookie === \u0026#34;同意\u0026#34;) { // 如果存在 \u0026#34;disclaimer\u0026#34; Cookie，并且值为 \u0026#34;同意\u0026#34;，则不显示弹窗 return; } // 显示弹窗 var disclaimer = \u0026#34;这是一个测试弹窗，当你同意cookie后不会再显示对话框.\u0026#34;; window.alert(disclaimer); // 询问用户是否同意记录cookie var result = window.confirm(\u0026#34;您是否同意记录cookie？（本站使用cookie来测试代码）\u0026#34;); if (result) { // 如果用户点击确认，将 \u0026#34;disclaimer\u0026#34; Cookie 的值设置为 \u0026#34;同意\u0026#34; setCookie(\u0026#34;disclaimer\u0026#34;, \u0026#34;同意\u0026#34;); // 显示已同意的提示消息 window.alert(\u0026#34;您已同意使用cookie.\u0026#34;); } else { // 如果用户点击取消或关闭对话框，执行重定向到浏览器空白页（可根据需求进行修改） window.location.href = \u0026#34;about:blank\u0026#34;; } } // 获取指定名称的 Cookie 的值 function getCookie(name) { var cookies = document.cookie.split(\u0026#34;; \u0026#34;); for (var i = 0; i \u0026lt; cookies.length; i++) { var cookie = cookies[i].split(\u0026#34;=\u0026#34;); if (cookie[0] === name) { return cookie[1]; } } return \u0026#34;\u0026#34;; } // 设置 Cookie function setCookie(name, value) { var expires = new Date(); expires.setFullYear(expires.getFullYear() + 1); // 设置 Cookie 有效期为一年 document.cookie = name + \u0026#34;=\u0026#34; + value + \u0026#34;; expires=\u0026#34; + expires.toUTCString(); } // 在适当的时候调用 showDisclaimer() 函数，例如在页面加载完成后或点击某个按钮时 showDisclaimer(); \u0026lt;/script\u0026gt; 可以用来做一个简易的免责声明、或者“同意 or No”的弹窗，不同意就给你重定向到about:blank（空白页）\n也可以做一些别的操作，只要是 JavaScript 能做到的都行\n缺点是如果你禁用了 JS，那这代码就没用\n","permalink":"https://charle00001.github.io/posts/cookie/","summary":"刚刚弹窗的代码： \u0026lt;script\u0026gt; function showDisclaimer() { // 检查是否存在名为 \u0026#34;disclaimer\u0026#34; 的 Cookie var disclaimerCookie = getCookie(\u0026#34;disclaimer\u0026#34;); if (disclaimerCookie === \u0026#34;同意\u0026#34;) { // 如果存在 \u0026#34;disclaimer\u0026#34; Cookie，并且值为 \u0026#34;同意\u0026","title":"关于cookie的一个实践"},{"content":"为什么要获取翻墙软件？ 获取信息的多样性 想象一个，当你的程序/工作出了一个严重的bug，然后你赶紧拿着报错信息去百度搜索. 结果出来一堆清一色的csdn，你会选择看或不看？\n这是百度的搜索结果：\n这是谷歌的：\n我看着在搜索结果里排列的整整齐齐的CSDN，陷入了人生与社会的大思考. CSDN给百度交钱了？？？？\n在百度中清一色的csdn，这就是“没有获取信息的多样性”，如果有一种不可抗力因素强行更改了这些信息，你也不知道.\n我上面说的只是关于“电脑技术”的“信息问题”，如果有一件“比电脑技术更严重的事情的发生”，而你所接触到的“信息获取渠道”又被“强行更改”，你只能了解到一些“别人想让你知道的信息”，那你就变成傻子啦！\n（就比如现今中国不能访问很多网站，所以我们要翻墙）\n当然，我也不是说“国外的信息获取渠道”就一定正确. 各个国家都有言论审查.\n比如：美国的“棱镜计划”\n比如：中国的“中宣部”\n比如：俄罗斯的“联邦通信、信息技术和大众传媒监督局”\n\u0026hellip;\u0026hellip;等等\n不过，即使很多国家都有网络审查，当我们获取信息的渠道很多时，凭借自身的思维能力基本可以分析出哪些信息是真的；哪些信息是被篡改过的.\n获取翻墙软件 前面浪费了一通口水，现在终于可以说这个了. 具体翻墙是什么意思？\n维基百科：在这里\nTor Browser \u0026amp; I2P 链接：点此进入\n自由门、无界、迷雾通、自由浏览 链接：点此进入\n","permalink":"https://charle00001.github.io/posts/how-to-get-vpn/","summary":"为什么要获取翻墙软件？ 获取信息的多样性 想象一个，当你的程序/工作出了一个严重的bug，然后你赶紧拿着报错信息去百度搜索. 结果出来一堆清一色的","title":"如何获取翻墙软件？（长期更新）"},{"content":"更新于2023-05-05 更新于2023-08-08 几天前我给我的博客加一个背景图和板块透明，还挺顺利的 大家的 Next 主题都是7.x.x的，我上网找了篇文章就改好了 7.8.0的背景图添加与板块透明设置（仅限 Gemini） // 背景图片设置 // 把下面的background.jpg改成你自己图片的名字放到 博客根目录/themes/next/source/images里面 body { background:url(/images/background.jpg); background-repeat: no-repeat; background-attachment:fixed; //不重复 background-size: cover; //填充 background-position:50% 50%; } //博客内容透明化 //文章内容的透明度设置 .content-wrap { opacity: 0.85; } //侧边框的透明度设置 .sidebar { opacity: 0.85; } //菜单栏的透明度设置 .header-inner { opacity: 0.85; } //搜索框（local-search）的透明度设置 .popup { opacity: 0.85; } //opacity是可以改的，改到1就是不透明，数值越小越透明 以上内容全部加在博客根目录/themes/next/source/css/_schemes/Gemini/index.styl的最后 7.8.0 的透明度设置就改好了。 我过了几天就突发奇想的要把NexT更新到最新版本 8.15.1（那时候很喜欢折腾这些七七八八的玩意） 麻烦的步骤：备份文件；克隆新版本；花了两个小时把主题配置文件和其他七七八八的东西改好；调试\u0026hellip;\u0026hellip;（新版与旧版的主题配置文件差异很大，得一条一条改，还非常长） 改好后：没加背景；没改透明度🌚 不过因为换了新版本，博客背景变成了彩虹丝带挺好看的；所以准备只改透明度 NexT 8.15.1的透明度设置修改过程 去网上搜了下，没找到新版本的，所以逝世7.8.0的配置 发现只有两个地方变的透明了，那就是侧边框和搜索框（local-search） //侧边框的透明度设置 .sidebar { opacity: 0.85; } //搜索框（local-search）的透明度设置 .popup { opacity: 0.85; } 那剩下的两个肯定是{}左边的玩意出了问题，一个是 .content-wrap，一个是 .header-inner 找到了：是.main-inner和header.header 放进去部署了下，发现找对了 所以，完整的代码是： //博客内容透明化 //内容的透明度设置 .main-inner { opacity: 0.85; } //侧边框的透明度设置 .sidebar { opacity: 0.85; } //菜单栏的透明度设置 header.header { opacity: 0.85; } //搜索框（local-search）的透明度设置 .popup { opacity: 0.85; } //opacity是可以改的，改到1就是不透明，数值越小越透明 但是我发现这样改对搜索插件不怎么友好，会覆盖搜索框，具体见下面的两个链接 我自己的问题：https://github.com/next-theme/hexo-theme-next/discussions/652 别人的问题：https://github.com/theme-next/hexo-theme-next/issues/914 所以，直接使用 .main，改变他的全局透明度 代码： //博客内容透明化 .main{ //这个是博客内容全局透明设置，除了搜索框，搜索框得自己改 opacity: 0.85; } //搜索框（local-search）的透明度设置 .popup { opacity: 0.99; } 我的配置文件在这里 与此文章相关的还有： 如何用Hexo+Github Page搭建免费博客\n第一次来到hugo的第一篇博文\n发布第一篇在Hexo个人博客（旧） 我添加的页面————其他\u0026amp;工具\n","permalink":"https://charle00001.github.io/posts/for-next-theme-8-15-1-all-board-transparency-modifications-with-modifications-for-7-8-0/","summary":"更新于2023-05-05 更新于2023-08-08 几天前我给我的博客加一个背景图和板块透明，还挺顺利的 大家的 Next 主题都是7.x.x的，我上网","title":"对于NexT主题8.15.1的所有板块透明度修改（附7.8.0的修改方法）"},{"content":"终于做了一个博客 （做完博客后的2年碰都没碰过） 如果你也想做一个像这样的个人博客，你可以参考以下网址：\n参考网址：\nhttps://hexo.io/zh-cn/docs/index.html \u0026lt;\u0026mdash; 官方网站\nhttps://zhuanlan.zhihu.com/p/114195340 \u0026lt;\u0026mdash; 这篇知乎文章帮了我许多地方，感谢🙏\nhttps://charle00001.github.io/posts/how-to-build-a-free-blog-with-hexo+github-page/ \u0026lt;\u0026mdash; 这篇文章是我写的（我感觉写的不怎么好，凑合看看吧）\n与此文章相关的还有： 如何用Hexo+Github Page搭建免费博客\n第一次来到hugo的第一篇博文\n对于NexT主题8.15.1的所有板块透明度修改（附7.8.0的修改方法）\n","permalink":"https://charle00001.github.io/posts/posted-the-first-one-on-hexo-s-personal-blog-old/","summary":"终于做了一个博客 （做完博客后的2年碰都没碰过） 如果你也想做一个像这样的个人博客，你可以参考以下网址： 参考网址： https://hexo.io/zh-cn/docs/index.html \u0026lt;\u0026mdash; 官方网站 https://zhuanlan.zhihu.com/p/114195340 \u0026lt;\u0026mdash; 这篇知乎文章帮","title":"发布第一篇在Hexo个人博客（旧）"},{"content":"在2023-10-22修正 了解Hexo 如果你也想做一个像这样的个人博客,请务必认真看完！！本文针对Mac,使用windows和Linux请自行上网查询！！\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n（好吧，Hexo官网是这么讲的）\n它是个非常不错博客框架，有很多好看的主题可以应用在自己的博客上，这篇文章要讲述如何用hexo写博客并部署到github上就好了。\n如果你已经用hexo写了博客并部署到github上了，就不要再看这篇文章了，快去 https://hexo.io/themes/ 寻找好看的、心仪的主题吧！！！\n配置需要的环境 先安装Node.js： https://nodejs.org/zh-cn/download/\n下载好了后请自行根据提示安装，推荐LTS版本（长期支持版）。\n安装git： Macos（好像有自带的，不过建议重新安装）:https://sourceforge.net/projects/git-osx-installer/\n安装Hexo: 官网给的是这条命令：\nnpm install -g hexo-cli\n大家注意了，要使用管理员权限，在命令开头加上sudo空格。\nnpm install -g hexo-cli\n回车，等待下载安装即可！\n熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。\nnpm install hexo\n使用Hexo搭建博客 在桌面新建一个空文件夹blog （因为我早就自己搭建过一个名字一样，所以使用blog2演示）\n使用Hexo初始化博客 首先进入blog文件夹：npx hexo init\n启动hexo npx hexo s\n如果提示4000端口被占用：\n遇到这种情况的话，你肯定之前也运行过这个命令并且没有control+c\n解决方法如下：\nsudo lsof -i:4000，查看被占用进程的pid\n再输sudo kill -9 pid （pid为上一步查看到的数字）\n然后再继续npx hexo s，则成功。\n在浏览器输入：http://localhost:4000，可查看到默认生成了一篇博文：\n如何新建一篇博文？ control+c断开刚刚的链接，新建一篇博文：\nnpx hexo n \u0026quot;发布第一篇个人博客\u0026quot;\n更改博文内容： 接下来就是更改博文内容，直接使用Visual Studio Code打开文章，找到博客根目录/source/_posts，里面有你创建的文章，直接做修改即可，不熟悉MarkDown格式的可以看看这个网站：\nhttps://www.runoob.com/markdown/md-tutorial.html\n（不难，现在我就在写这玩意）\n随便使用哪个编辑器，反正我习惯用VSCode。\n在本地预览： 同样在blog2文件夹下：\n清理public文件夹：npx hexo clean\n生成：npx hexo g\n启动：npx hexo s\n刷新http://localhost:4000/则看到，内容已经更新上去了：\n部署至github 如果你想让别人也能访问到（废话），那么免费的方法就是把网站部署至github。\n还有很多地方可以部署网站，这种云部署平台一搜一大把。我还推荐两个：Vercel和CF Pages。\n这三个平台是绝对靠谱滴，微软、cloudflare。还有vercel，绝对是神器。他还可以部署【动态】网站，重点是【免费】！\n登录github： https://github.com/\n没账号的新建一个（这个我不用教了吧），新创建一个仓库：\n仓库名必须为：昵称.github.io，输入描述（也可以不输），创建（记得选公开）：\n（因为不能重名，而且我已经有了，所以有红色感叹号，你们不会）\n安装git部署插件 命令行下，ctrl+c，退出命令。还是在blog2目录下，安装git部署插件\nnpm install hexo-deployer-git --save\n更改配置 更改blog2文件夹根目录下，_config.yml的配置：\n把这些替换为：\n# Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 记得把yourname替换成你的昵称。\n设置SSH密钥： 首先检测自己电脑是否存在 SSH key： 在生成SSH密钥之前，您可以检查是否有任何现有的SSH密钥。\n打开终端 查看是否存在现有SSH密钥 输入命令以查看是否存在现有SSH密钥⬇️：\nls -al ~/.ssh # 列出.ssh目录中的文件(如果存在的话) 检查目录列表以查看您是否已拥有公共SSH密钥。 ·如果你本地没有生成的话\n终端上面会显示：No such file or directory\n·如果已经存在的话\n则会显示 id_rsa 和 id_rsa.pub\n如果本地没有的话，我们要自己生成新的SSH秘钥（如果存在，请跳过4.4.1.）\n创建一个新的ssh密钥 在终端输入下面的命令，记得替换您的GitHub电子邮件地址,这将使用提供的电子邮件作为标签创建一个新的ssh密钥。\nssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; #\u0026#34;your_email@example.com\u0026#34;为示例邮箱，此处应填写为你在github上面注册的邮箱。 显示：\nGenerating public/private rsa key pair. 系统提示您“输入要保存密钥的文件”时 当系统提示您“输入要保存密钥的文件”时，按Enter键使用默认文件位置。\nEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 键入安全密码 在提示符下，键入安全密码（强烈不建议设置密码，否则你上传一次就要输一次，特别麻烦。。。）。可以连续Enter，不设置密码。\nEnter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] 成功后，终端显示：\nYour identitification has been saved in /Users/xxx/.ssh/id_rsa. Your public key has been saved in /user/xxx/id_rsa.pub. the key fingerprint is xxxxxxxxxx…….xxxxxxxx your_email@example.com The key’s randomart image is: 将SSH密钥添加到ssh-agent 在后台启动ssh-agent 输入命令： eval \u0026quot;$(ssh-agent -s)\u0026quot;\n\u0026gt; Agent pid xxxxx 终端输入命令： ssh-add -K ~/.ssh/id_rsa\n如果设置密码，此时会要求输入passphrase（输入步骤二中你当时设置的passphrase就好）\n成功后，终端显示：\nIdentity added: /Users/xxx/.ssh/id_rsa (your_email@example.com) 添加SSH key 到Github 上 将SSH密钥复制到剪贴板 pbcopy \u0026lt; ~/.ssh/id_rsa.pub\n复制id_rsa.pub的内容到剪贴板提示：如果pbcopy不起作用，您可以找到隐藏.ssh文件夹（路径~/.ssh/，在文本编辑器中打开id_rsa.pub文件，然后将文件内容复制到剪贴板。\n找到“Settings” 打开Github,在任意页面的右上角，单击您的个人资料照片，然后单击“Settings”。 找到“SSH and GPG keys” 在用户设置侧栏中，单击“SSH and GPG keys”。\n单击“ New SSH key” 添加密钥 在“Title”字段中添加描述性标签，Key字段中粘贴您复制的id_rsa.pub内容。最后点击“Add SSH key”\n确认您的GitHub密码 最后请确认您的GitHub密码。\n如何检测SSH key 终端输入命令 ssh git@github.com\n验证SSH key是否有权限访问你的github，输入“yes”\nThe authenticity of host ‘github.com (13.250.177.223)’ can’t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? yes 成功会显示为\nHi you name! You’ve successfully authenticated, but GitHub does not provide shell access. push至GitHub仓库 在部署到github之前，别忘了要先 npx hexo clean # 删除之前编译的文件（public、database等） npx hexo g # 重新编译新文件等待被部署至github # 部署完了之后就可以运行npx hexo clean把编译的文件删掉了 现在，就可以push至GitHub远程仓库了 npx hexo d #d就是deploy，即部署 与此文章相关的还有： 第一次来到hugo的第一篇博文\n发布第一篇在Hexo个人博客（旧） 对于NexT主题8.15.1的所有板块透明度修改（附7.8.0的修改方法）\n","permalink":"https://charle00001.github.io/posts/how-to-build-a-free-blog-with-hexo+github-page/","summary":"在2023-10-22修正 了解Hexo 如果你也想做一个像这样的个人博客,请务必认真看完！！本文针对Mac,使用windows和Linux请自","title":"如何用Hexo+Github Page搭建免费博客"},{"content":"开门见山，附上文件. 下载链接：点这儿\n下载的许可证文件没有病毒，请放心使用。\n激活方法 下载许可证文件，解压缩，打开 BT Sync（现改名为 Resilio Sync），点击最右上角的“齿轮”（设置）.\n然后点击许可证.\n（接下来看下一张图片里面的操作步骤）\n","permalink":"https://charle00001.github.io/paperfile/bt-sync/","summary":"开门见山，附上文件. 下载链接：点这儿 下载的许可证文件没有病毒，请放心使用。 激活方法 下载许可证文件，解压缩，打开 BT Sync（现改名为 Resilio Sync","title":"BT Sync(Resilio Sync)永久激活"},{"content":"正在施工。\n预计完成时间：永不完成。\n","permalink":"https://charle00001.github.io/paperfile/trex/","summary":"正在施工。 预计完成时间：永不完成。","title":"T-rex（谷歌小恐龙）"},{"content":"重定向到新的地方说明 当时把“翻墙软件获取中心”的目录路径名写错了，写成了\u0026quot;get-network-breaking-software\u0026quot;，变成了“获取破坏网络的软件” 英语不太好，当时直接在谷歌翻译里【中翻英】了（都是谷歌翻译的锅，不关我的事_TAT_） 看来谷歌翻译不太智能啊，到时候看看 DeepL 的表现如何（官网写着–––––DeepL翻译：全世界最准确的翻译） 说了这么多，开始重定向吧： 链接：在这里\nlink：Here\n我就不使用\u0026quot;Http 301 or 302\u0026quot;了，懒 也不使用JavaScript来重定向了，更懒 ","permalink":"https://charle00001.github.io/paperfile/unuse/get-network-breaking-software/","summary":"重定向到新的地方说明 当时把“翻墙软件获取中心”的目录路径名写错了，写成了\u0026quot;get-network-breaking-softwar","title":"翻墙软件下载中心"},{"content":"鱼列表 鱼名称 鱼链接 扫雷/minesweeper 这里 2048 这里 俄罗斯方块/canvas tetris 这里 抓猫/catch cat 这里 甭鸟/clumsy bird 这里 五子棋/Gobang 这里 HexGL 这里 Minecraft 这里 pacman/吃豆人 这里 t-rex/google恐龙 这里 Tic Tac Toe/九宫格 这里 ","permalink":"https://charle00001.github.io/paperfile/games_about/","summary":"鱼列表 鱼名称 鱼链接 扫雷/minesweeper 这里 2048 这里 俄罗斯方块/canvas tetris 这里 抓猫/catch cat 这里 甭鸟/clumsy bird 这里 五子棋/","title":"摸鱼"}]